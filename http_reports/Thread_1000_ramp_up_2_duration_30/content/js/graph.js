/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 39020.0, "series": [{"data": [[0.0, 0.0], [0.1, 3.0], [0.2, 5.0], [0.3, 6.0], [0.4, 6.0], [0.5, 7.0], [0.6, 8.0], [0.7, 9.0], [0.8, 9.0], [0.9, 10.0], [1.0, 10.0], [1.1, 11.0], [1.2, 12.0], [1.3, 12.0], [1.4, 13.0], [1.5, 13.0], [1.6, 13.0], [1.7, 14.0], [1.8, 14.0], [1.9, 15.0], [2.0, 15.0], [2.1, 16.0], [2.2, 16.0], [2.3, 17.0], [2.4, 17.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 18.0], [2.9, 19.0], [3.0, 19.0], [3.1, 20.0], [3.2, 20.0], [3.3, 20.0], [3.4, 21.0], [3.5, 21.0], [3.6, 22.0], [3.7, 22.0], [3.8, 23.0], [3.9, 23.0], [4.0, 23.0], [4.1, 24.0], [4.2, 24.0], [4.3, 25.0], [4.4, 25.0], [4.5, 25.0], [4.6, 26.0], [4.7, 26.0], [4.8, 26.0], [4.9, 26.0], [5.0, 27.0], [5.1, 27.0], [5.2, 27.0], [5.3, 27.0], [5.4, 27.0], [5.5, 28.0], [5.6, 28.0], [5.7, 28.0], [5.8, 28.0], [5.9, 29.0], [6.0, 29.0], [6.1, 29.0], [6.2, 29.0], [6.3, 29.0], [6.4, 30.0], [6.5, 30.0], [6.6, 30.0], [6.7, 30.0], [6.8, 31.0], [6.9, 31.0], [7.0, 31.0], [7.1, 31.0], [7.2, 32.0], [7.3, 32.0], [7.4, 32.0], [7.5, 32.0], [7.6, 33.0], [7.7, 33.0], [7.8, 33.0], [7.9, 33.0], [8.0, 34.0], [8.1, 34.0], [8.2, 35.0], [8.3, 35.0], [8.4, 35.0], [8.5, 36.0], [8.6, 36.0], [8.7, 36.0], [8.8, 37.0], [8.9, 37.0], [9.0, 37.0], [9.1, 38.0], [9.2, 38.0], [9.3, 38.0], [9.4, 38.0], [9.5, 39.0], [9.6, 39.0], [9.7, 39.0], [9.8, 39.0], [9.9, 39.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 41.0], [10.6, 41.0], [10.7, 41.0], [10.8, 42.0], [10.9, 42.0], [11.0, 42.0], [11.1, 43.0], [11.2, 43.0], [11.3, 43.0], [11.4, 43.0], [11.5, 43.0], [11.6, 44.0], [11.7, 44.0], [11.8, 44.0], [11.9, 44.0], [12.0, 44.0], [12.1, 45.0], [12.2, 45.0], [12.3, 45.0], [12.4, 45.0], [12.5, 45.0], [12.6, 46.0], [12.7, 46.0], [12.8, 46.0], [12.9, 46.0], [13.0, 47.0], [13.1, 47.0], [13.2, 47.0], [13.3, 47.0], [13.4, 48.0], [13.5, 48.0], [13.6, 48.0], [13.7, 48.0], [13.8, 48.0], [13.9, 48.0], [14.0, 49.0], [14.1, 49.0], [14.2, 49.0], [14.3, 49.0], [14.4, 49.0], [14.5, 49.0], [14.6, 49.0], [14.7, 49.0], [14.8, 49.0], [14.9, 50.0], [15.0, 50.0], [15.1, 50.0], [15.2, 50.0], [15.3, 50.0], [15.4, 50.0], [15.5, 50.0], [15.6, 50.0], [15.7, 51.0], [15.8, 51.0], [15.9, 51.0], [16.0, 51.0], [16.1, 51.0], [16.2, 51.0], [16.3, 51.0], [16.4, 51.0], [16.5, 51.0], [16.6, 51.0], [16.7, 51.0], [16.8, 52.0], [16.9, 52.0], [17.0, 52.0], [17.1, 52.0], [17.2, 52.0], [17.3, 52.0], [17.4, 52.0], [17.5, 52.0], [17.6, 52.0], [17.7, 52.0], [17.8, 52.0], [17.9, 53.0], [18.0, 53.0], [18.1, 53.0], [18.2, 53.0], [18.3, 53.0], [18.4, 53.0], [18.5, 53.0], [18.6, 53.0], [18.7, 53.0], [18.8, 53.0], [18.9, 54.0], [19.0, 54.0], [19.1, 54.0], [19.2, 54.0], [19.3, 54.0], [19.4, 54.0], [19.5, 54.0], [19.6, 54.0], [19.7, 54.0], [19.8, 54.0], [19.9, 54.0], [20.0, 55.0], [20.1, 55.0], [20.2, 55.0], [20.3, 55.0], [20.4, 55.0], [20.5, 55.0], [20.6, 55.0], [20.7, 55.0], [20.8, 55.0], [20.9, 55.0], [21.0, 55.0], [21.1, 55.0], [21.2, 56.0], [21.3, 56.0], [21.4, 56.0], [21.5, 56.0], [21.6, 56.0], [21.7, 56.0], [21.8, 56.0], [21.9, 56.0], [22.0, 56.0], [22.1, 56.0], [22.2, 56.0], [22.3, 57.0], [22.4, 57.0], [22.5, 57.0], [22.6, 57.0], [22.7, 57.0], [22.8, 57.0], [22.9, 57.0], [23.0, 57.0], [23.1, 57.0], [23.2, 57.0], [23.3, 58.0], [23.4, 58.0], [23.5, 58.0], [23.6, 58.0], [23.7, 58.0], [23.8, 58.0], [23.9, 58.0], [24.0, 58.0], [24.1, 58.0], [24.2, 58.0], [24.3, 59.0], [24.4, 59.0], [24.5, 59.0], [24.6, 59.0], [24.7, 59.0], [24.8, 59.0], [24.9, 59.0], [25.0, 59.0], [25.1, 59.0], [25.2, 59.0], [25.3, 59.0], [25.4, 59.0], [25.5, 60.0], [25.6, 60.0], [25.7, 60.0], [25.8, 60.0], [25.9, 60.0], [26.0, 60.0], [26.1, 60.0], [26.2, 60.0], [26.3, 60.0], [26.4, 60.0], [26.5, 60.0], [26.6, 60.0], [26.7, 61.0], [26.8, 61.0], [26.9, 61.0], [27.0, 61.0], [27.1, 61.0], [27.2, 61.0], [27.3, 61.0], [27.4, 61.0], [27.5, 61.0], [27.6, 61.0], [27.7, 61.0], [27.8, 61.0], [27.9, 62.0], [28.0, 62.0], [28.1, 62.0], [28.2, 62.0], [28.3, 62.0], [28.4, 62.0], [28.5, 62.0], [28.6, 62.0], [28.7, 62.0], [28.8, 62.0], [28.9, 63.0], [29.0, 63.0], [29.1, 63.0], [29.2, 63.0], [29.3, 63.0], [29.4, 63.0], [29.5, 63.0], [29.6, 63.0], [29.7, 63.0], [29.8, 63.0], [29.9, 64.0], [30.0, 64.0], [30.1, 64.0], [30.2, 64.0], [30.3, 64.0], [30.4, 64.0], [30.5, 64.0], [30.6, 64.0], [30.7, 64.0], [30.8, 64.0], [30.9, 65.0], [31.0, 65.0], [31.1, 65.0], [31.2, 65.0], [31.3, 65.0], [31.4, 65.0], [31.5, 65.0], [31.6, 65.0], [31.7, 65.0], [31.8, 65.0], [31.9, 65.0], [32.0, 65.0], [32.1, 65.0], [32.2, 66.0], [32.3, 66.0], [32.4, 66.0], [32.5, 66.0], [32.6, 66.0], [32.7, 66.0], [32.8, 66.0], [32.9, 66.0], [33.0, 66.0], [33.1, 66.0], [33.2, 66.0], [33.3, 66.0], [33.4, 67.0], [33.5, 67.0], [33.6, 67.0], [33.7, 67.0], [33.8, 67.0], [33.9, 67.0], [34.0, 67.0], [34.1, 67.0], [34.2, 67.0], [34.3, 67.0], [34.4, 67.0], [34.5, 67.0], [34.6, 67.0], [34.7, 68.0], [34.8, 68.0], [34.9, 68.0], [35.0, 68.0], [35.1, 68.0], [35.2, 68.0], [35.3, 68.0], [35.4, 68.0], [35.5, 68.0], [35.6, 68.0], [35.7, 68.0], [35.8, 69.0], [35.9, 69.0], [36.0, 69.0], [36.1, 69.0], [36.2, 69.0], [36.3, 69.0], [36.4, 69.0], [36.5, 69.0], [36.6, 69.0], [36.7, 69.0], [36.8, 69.0], [36.9, 70.0], [37.0, 70.0], [37.1, 70.0], [37.2, 70.0], [37.3, 70.0], [37.4, 70.0], [37.5, 70.0], [37.6, 70.0], [37.7, 70.0], [37.8, 70.0], [37.9, 70.0], [38.0, 71.0], [38.1, 71.0], [38.2, 71.0], [38.3, 71.0], [38.4, 71.0], [38.5, 71.0], [38.6, 71.0], [38.7, 71.0], [38.8, 71.0], [38.9, 71.0], [39.0, 72.0], [39.1, 72.0], [39.2, 72.0], [39.3, 72.0], [39.4, 72.0], [39.5, 72.0], [39.6, 72.0], [39.7, 72.0], [39.8, 73.0], [39.9, 73.0], [40.0, 73.0], [40.1, 73.0], [40.2, 73.0], [40.3, 73.0], [40.4, 73.0], [40.5, 73.0], [40.6, 73.0], [40.7, 73.0], [40.8, 74.0], [40.9, 74.0], [41.0, 74.0], [41.1, 74.0], [41.2, 74.0], [41.3, 74.0], [41.4, 74.0], [41.5, 74.0], [41.6, 75.0], [41.7, 75.0], [41.8, 75.0], [41.9, 75.0], [42.0, 75.0], [42.1, 75.0], [42.2, 75.0], [42.3, 75.0], [42.4, 75.0], [42.5, 76.0], [42.6, 76.0], [42.7, 76.0], [42.8, 76.0], [42.9, 76.0], [43.0, 76.0], [43.1, 76.0], [43.2, 76.0], [43.3, 76.0], [43.4, 77.0], [43.5, 77.0], [43.6, 77.0], [43.7, 77.0], [43.8, 77.0], [43.9, 77.0], [44.0, 77.0], [44.1, 78.0], [44.2, 78.0], [44.3, 78.0], [44.4, 78.0], [44.5, 78.0], [44.6, 78.0], [44.7, 78.0], [44.8, 78.0], [44.9, 78.0], [45.0, 78.0], [45.1, 79.0], [45.2, 79.0], [45.3, 79.0], [45.4, 79.0], [45.5, 79.0], [45.6, 79.0], [45.7, 79.0], [45.8, 79.0], [45.9, 79.0], [46.0, 80.0], [46.1, 80.0], [46.2, 80.0], [46.3, 80.0], [46.4, 80.0], [46.5, 80.0], [46.6, 80.0], [46.7, 80.0], [46.8, 81.0], [46.9, 81.0], [47.0, 81.0], [47.1, 81.0], [47.2, 81.0], [47.3, 81.0], [47.4, 81.0], [47.5, 81.0], [47.6, 81.0], [47.7, 81.0], [47.8, 82.0], [47.9, 82.0], [48.0, 82.0], [48.1, 82.0], [48.2, 82.0], [48.3, 82.0], [48.4, 82.0], [48.5, 82.0], [48.6, 82.0], [48.7, 82.0], [48.8, 82.0], [48.9, 83.0], [49.0, 83.0], [49.1, 83.0], [49.2, 83.0], [49.3, 83.0], [49.4, 83.0], [49.5, 83.0], [49.6, 83.0], [49.7, 83.0], [49.8, 83.0], [49.9, 83.0], [50.0, 84.0], [50.1, 84.0], [50.2, 84.0], [50.3, 84.0], [50.4, 84.0], [50.5, 84.0], [50.6, 84.0], [50.7, 84.0], [50.8, 84.0], [50.9, 84.0], [51.0, 84.0], [51.1, 84.0], [51.2, 84.0], [51.3, 84.0], [51.4, 85.0], [51.5, 85.0], [51.6, 85.0], [51.7, 85.0], [51.8, 85.0], [51.9, 85.0], [52.0, 85.0], [52.1, 85.0], [52.2, 85.0], [52.3, 85.0], [52.4, 85.0], [52.5, 85.0], [52.6, 85.0], [52.7, 85.0], [52.8, 85.0], [52.9, 86.0], [53.0, 86.0], [53.1, 86.0], [53.2, 86.0], [53.3, 86.0], [53.4, 86.0], [53.5, 86.0], [53.6, 86.0], [53.7, 86.0], [53.8, 86.0], [53.9, 86.0], [54.0, 86.0], [54.1, 86.0], [54.2, 87.0], [54.3, 87.0], [54.4, 87.0], [54.5, 87.0], [54.6, 87.0], [54.7, 87.0], [54.8, 87.0], [54.9, 87.0], [55.0, 87.0], [55.1, 87.0], [55.2, 87.0], [55.3, 88.0], [55.4, 88.0], [55.5, 88.0], [55.6, 88.0], [55.7, 88.0], [55.8, 88.0], [55.9, 88.0], [56.0, 88.0], [56.1, 88.0], [56.2, 88.0], [56.3, 88.0], [56.4, 88.0], [56.5, 89.0], [56.6, 89.0], [56.7, 89.0], [56.8, 89.0], [56.9, 89.0], [57.0, 89.0], [57.1, 89.0], [57.2, 89.0], [57.3, 89.0], [57.4, 89.0], [57.5, 89.0], [57.6, 89.0], [57.7, 89.0], [57.8, 89.0], [57.9, 89.0], [58.0, 89.0], [58.1, 90.0], [58.2, 90.0], [58.3, 90.0], [58.4, 90.0], [58.5, 90.0], [58.6, 90.0], [58.7, 90.0], [58.8, 90.0], [58.9, 90.0], [59.0, 90.0], [59.1, 90.0], [59.2, 90.0], [59.3, 90.0], [59.4, 91.0], [59.5, 91.0], [59.6, 91.0], [59.7, 91.0], [59.8, 91.0], [59.9, 91.0], [60.0, 91.0], [60.1, 91.0], [60.2, 91.0], [60.3, 91.0], [60.4, 91.0], [60.5, 92.0], [60.6, 92.0], [60.7, 92.0], [60.8, 92.0], [60.9, 92.0], [61.0, 92.0], [61.1, 92.0], [61.2, 92.0], [61.3, 92.0], [61.4, 92.0], [61.5, 92.0], [61.6, 93.0], [61.7, 93.0], [61.8, 93.0], [61.9, 93.0], [62.0, 93.0], [62.1, 93.0], [62.2, 93.0], [62.3, 93.0], [62.4, 93.0], [62.5, 93.0], [62.6, 93.0], [62.7, 94.0], [62.8, 94.0], [62.9, 94.0], [63.0, 94.0], [63.1, 94.0], [63.2, 94.0], [63.3, 94.0], [63.4, 94.0], [63.5, 94.0], [63.6, 94.0], [63.7, 95.0], [63.8, 95.0], [63.9, 95.0], [64.0, 95.0], [64.1, 95.0], [64.2, 95.0], [64.3, 95.0], [64.4, 95.0], [64.5, 96.0], [64.6, 96.0], [64.7, 96.0], [64.8, 96.0], [64.9, 96.0], [65.0, 96.0], [65.1, 96.0], [65.2, 96.0], [65.3, 96.0], [65.4, 97.0], [65.5, 97.0], [65.6, 97.0], [65.7, 97.0], [65.8, 97.0], [65.9, 97.0], [66.0, 97.0], [66.1, 97.0], [66.2, 97.0], [66.3, 97.0], [66.4, 97.0], [66.5, 98.0], [66.6, 98.0], [66.7, 98.0], [66.8, 98.0], [66.9, 98.0], [67.0, 98.0], [67.1, 98.0], [67.2, 98.0], [67.3, 98.0], [67.4, 98.0], [67.5, 98.0], [67.6, 98.0], [67.7, 99.0], [67.8, 99.0], [67.9, 99.0], [68.0, 99.0], [68.1, 99.0], [68.2, 99.0], [68.3, 99.0], [68.4, 99.0], [68.5, 99.0], [68.6, 99.0], [68.7, 99.0], [68.8, 100.0], [68.9, 100.0], [69.0, 100.0], [69.1, 100.0], [69.2, 100.0], [69.3, 100.0], [69.4, 100.0], [69.5, 100.0], [69.6, 100.0], [69.7, 100.0], [69.8, 100.0], [69.9, 100.0], [70.0, 100.0], [70.1, 100.0], [70.2, 101.0], [70.3, 101.0], [70.4, 101.0], [70.5, 101.0], [70.6, 101.0], [70.7, 101.0], [70.8, 101.0], [70.9, 101.0], [71.0, 101.0], [71.1, 101.0], [71.2, 101.0], [71.3, 101.0], [71.4, 101.0], [71.5, 102.0], [71.6, 102.0], [71.7, 102.0], [71.8, 102.0], [71.9, 102.0], [72.0, 102.0], [72.1, 102.0], [72.2, 102.0], [72.3, 102.0], [72.4, 102.0], [72.5, 102.0], [72.6, 102.0], [72.7, 103.0], [72.8, 103.0], [72.9, 103.0], [73.0, 103.0], [73.1, 103.0], [73.2, 103.0], [73.3, 103.0], [73.4, 103.0], [73.5, 103.0], [73.6, 104.0], [73.7, 104.0], [73.8, 104.0], [73.9, 104.0], [74.0, 104.0], [74.1, 104.0], [74.2, 104.0], [74.3, 104.0], [74.4, 104.0], [74.5, 104.0], [74.6, 105.0], [74.7, 105.0], [74.8, 105.0], [74.9, 105.0], [75.0, 105.0], [75.1, 105.0], [75.2, 105.0], [75.3, 105.0], [75.4, 105.0], [75.5, 105.0], [75.6, 106.0], [75.7, 106.0], [75.8, 106.0], [75.9, 106.0], [76.0, 106.0], [76.1, 106.0], [76.2, 106.0], [76.3, 106.0], [76.4, 106.0], [76.5, 106.0], [76.6, 106.0], [76.7, 107.0], [76.8, 107.0], [76.9, 107.0], [77.0, 107.0], [77.1, 107.0], [77.2, 107.0], [77.3, 107.0], [77.4, 107.0], [77.5, 107.0], [77.6, 107.0], [77.7, 107.0], [77.8, 108.0], [77.9, 108.0], [78.0, 108.0], [78.1, 108.0], [78.2, 108.0], [78.3, 108.0], [78.4, 108.0], [78.5, 108.0], [78.6, 108.0], [78.7, 108.0], [78.8, 109.0], [78.9, 109.0], [79.0, 109.0], [79.1, 109.0], [79.2, 109.0], [79.3, 109.0], [79.4, 109.0], [79.5, 109.0], [79.6, 109.0], [79.7, 110.0], [79.8, 110.0], [79.9, 110.0], [80.0, 110.0], [80.1, 110.0], [80.2, 110.0], [80.3, 110.0], [80.4, 110.0], [80.5, 110.0], [80.6, 111.0], [80.7, 111.0], [80.8, 111.0], [80.9, 111.0], [81.0, 111.0], [81.1, 111.0], [81.2, 111.0], [81.3, 112.0], [81.4, 112.0], [81.5, 112.0], [81.6, 112.0], [81.7, 112.0], [81.8, 112.0], [81.9, 112.0], [82.0, 113.0], [82.1, 113.0], [82.2, 113.0], [82.3, 113.0], [82.4, 113.0], [82.5, 114.0], [82.6, 114.0], [82.7, 114.0], [82.8, 114.0], [82.9, 114.0], [83.0, 115.0], [83.1, 115.0], [83.2, 115.0], [83.3, 115.0], [83.4, 115.0], [83.5, 115.0], [83.6, 116.0], [83.7, 116.0], [83.8, 116.0], [83.9, 116.0], [84.0, 116.0], [84.1, 117.0], [84.2, 117.0], [84.3, 117.0], [84.4, 117.0], [84.5, 118.0], [84.6, 118.0], [84.7, 118.0], [84.8, 119.0], [84.9, 119.0], [85.0, 119.0], [85.1, 120.0], [85.2, 120.0], [85.3, 120.0], [85.4, 121.0], [85.5, 121.0], [85.6, 121.0], [85.7, 121.0], [85.8, 122.0], [85.9, 122.0], [86.0, 122.0], [86.1, 123.0], [86.2, 123.0], [86.3, 123.0], [86.4, 123.0], [86.5, 124.0], [86.6, 124.0], [86.7, 124.0], [86.8, 124.0], [86.9, 125.0], [87.0, 125.0], [87.1, 125.0], [87.2, 126.0], [87.3, 126.0], [87.4, 126.0], [87.5, 126.0], [87.6, 127.0], [87.7, 127.0], [87.8, 127.0], [87.9, 128.0], [88.0, 128.0], [88.1, 129.0], [88.2, 129.0], [88.3, 129.0], [88.4, 130.0], [88.5, 130.0], [88.6, 130.0], [88.7, 131.0], [88.8, 131.0], [88.9, 132.0], [89.0, 132.0], [89.1, 132.0], [89.2, 133.0], [89.3, 133.0], [89.4, 133.0], [89.5, 134.0], [89.6, 134.0], [89.7, 134.0], [89.8, 135.0], [89.9, 135.0], [90.0, 135.0], [90.1, 136.0], [90.2, 136.0], [90.3, 136.0], [90.4, 137.0], [90.5, 137.0], [90.6, 138.0], [90.7, 138.0], [90.8, 138.0], [90.9, 139.0], [91.0, 139.0], [91.1, 140.0], [91.2, 140.0], [91.3, 141.0], [91.4, 141.0], [91.5, 142.0], [91.6, 143.0], [91.7, 143.0], [91.8, 144.0], [91.9, 145.0], [92.0, 146.0], [92.1, 147.0], [92.2, 148.0], [92.3, 149.0], [92.4, 150.0], [92.5, 151.0], [92.6, 151.0], [92.7, 152.0], [92.8, 153.0], [92.9, 153.0], [93.0, 154.0], [93.1, 155.0], [93.2, 155.0], [93.3, 156.0], [93.4, 156.0], [93.5, 157.0], [93.6, 158.0], [93.7, 158.0], [93.8, 159.0], [93.9, 159.0], [94.0, 160.0], [94.1, 160.0], [94.2, 161.0], [94.3, 161.0], [94.4, 162.0], [94.5, 162.0], [94.6, 163.0], [94.7, 164.0], [94.8, 164.0], [94.9, 165.0], [95.0, 166.0], [95.1, 167.0], [95.2, 167.0], [95.3, 168.0], [95.4, 168.0], [95.5, 168.0], [95.6, 169.0], [95.7, 169.0], [95.8, 170.0], [95.9, 170.0], [96.0, 171.0], [96.1, 171.0], [96.2, 172.0], [96.3, 172.0], [96.4, 172.0], [96.5, 173.0], [96.6, 173.0], [96.7, 173.0], [96.8, 174.0], [96.9, 175.0], [97.0, 175.0], [97.1, 176.0], [97.2, 179.0], [97.3, 180.0], [97.4, 182.0], [97.5, 184.0], [97.6, 186.0], [97.7, 189.0], [97.8, 192.0], [97.9, 193.0], [98.0, 195.0], [98.1, 196.0], [98.2, 197.0], [98.3, 199.0], [98.4, 200.0], [98.5, 201.0], [98.6, 203.0], [98.7, 204.0], [98.8, 206.0], [98.9, 213.0], [99.0, 306.0], [99.1, 1104.0], [99.2, 6146.0], [99.3, 9891.0], [99.4, 18668.0], [99.5, 27351.0], [99.6, 30400.0], [99.7, 32608.0], [99.8, 33095.0], [99.9, 39008.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 73274.0, "series": [{"data": [[0.0, 73274.0], [100.0, 31511.0], [34500.0, 3.0], [34100.0, 7.0], [33300.0, 8.0], [33700.0, 2.0], [32900.0, 13.0], [34900.0, 1.0], [200.0, 675.0], [300.0, 80.0], [400.0, 14.0], [500.0, 7.0], [600.0, 4.0], [700.0, 6.0], [800.0, 4.0], [900.0, 5.0], [1000.0, 2.0], [1100.0, 7.0], [1200.0, 3.0], [1300.0, 1.0], [1400.0, 3.0], [1500.0, 3.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 3.0], [1900.0, 6.0], [2000.0, 2.0], [2100.0, 2.0], [2200.0, 1.0], [2300.0, 2.0], [2400.0, 3.0], [2500.0, 2.0], [2600.0, 3.0], [2700.0, 3.0], [2800.0, 1.0], [2900.0, 2.0], [3000.0, 3.0], [3100.0, 1.0], [3200.0, 2.0], [3300.0, 2.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 3.0], [3700.0, 2.0], [3800.0, 2.0], [3900.0, 4.0], [4000.0, 1.0], [4100.0, 2.0], [4200.0, 3.0], [4300.0, 2.0], [4400.0, 1.0], [4500.0, 2.0], [4600.0, 2.0], [4700.0, 3.0], [4800.0, 2.0], [4900.0, 2.0], [5000.0, 1.0], [5100.0, 2.0], [5200.0, 2.0], [5300.0, 1.0], [5400.0, 2.0], [5500.0, 1.0], [5600.0, 1.0], [5700.0, 2.0], [5800.0, 1.0], [5900.0, 1.0], [6000.0, 1.0], [6100.0, 2.0], [6200.0, 2.0], [6300.0, 1.0], [6400.0, 1.0], [6500.0, 1.0], [6600.0, 2.0], [6700.0, 8.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 2.0], [7100.0, 2.0], [7200.0, 2.0], [7300.0, 2.0], [7400.0, 2.0], [7500.0, 2.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 2.0], [7900.0, 2.0], [8000.0, 2.0], [8100.0, 2.0], [8200.0, 2.0], [8300.0, 1.0], [8400.0, 2.0], [8500.0, 1.0], [8600.0, 2.0], [8700.0, 3.0], [8800.0, 7.0], [8900.0, 5.0], [9100.0, 8.0], [9200.0, 9.0], [9000.0, 3.0], [9300.0, 6.0], [9400.0, 3.0], [9500.0, 5.0], [9600.0, 3.0], [9700.0, 4.0], [9800.0, 4.0], [10000.0, 5.0], [9900.0, 3.0], [10100.0, 2.0], [10200.0, 1.0], [10400.0, 5.0], [10500.0, 6.0], [10600.0, 1.0], [10700.0, 2.0], [10300.0, 2.0], [11100.0, 5.0], [11000.0, 5.0], [10900.0, 1.0], [11500.0, 3.0], [11600.0, 3.0], [11800.0, 1.0], [11900.0, 4.0], [12200.0, 1.0], [12400.0, 1.0], [12500.0, 1.0], [12600.0, 1.0], [13100.0, 11.0], [13200.0, 1.0], [13300.0, 1.0], [12800.0, 1.0], [13500.0, 2.0], [14000.0, 1.0], [14200.0, 3.0], [14300.0, 1.0], [14400.0, 2.0], [14500.0, 1.0], [14600.0, 2.0], [14700.0, 1.0], [14800.0, 1.0], [14900.0, 1.0], [15000.0, 2.0], [15100.0, 2.0], [15300.0, 1.0], [15500.0, 1.0], [17200.0, 3.0], [17600.0, 1.0], [17800.0, 1.0], [18000.0, 1.0], [18200.0, 1.0], [18400.0, 1.0], [19200.0, 1.0], [18600.0, 1.0], [18800.0, 1.0], [19000.0, 2.0], [19400.0, 4.0], [19600.0, 3.0], [19800.0, 2.0], [20000.0, 2.0], [20200.0, 4.0], [20400.0, 1.0], [26000.0, 4.0], [26400.0, 5.0], [26200.0, 7.0], [26600.0, 6.0], [26800.0, 4.0], [27000.0, 5.0], [27200.0, 2.0], [27400.0, 4.0], [27600.0, 3.0], [27800.0, 13.0], [28600.0, 1.0], [28400.0, 2.0], [28200.0, 1.0], [29600.0, 4.0], [29400.0, 3.0], [29200.0, 3.0], [29000.0, 2.0], [28800.0, 2.0], [30400.0, 6.0], [30200.0, 8.0], [30000.0, 7.0], [30600.0, 6.0], [29800.0, 9.0], [31600.0, 2.0], [31400.0, 2.0], [31200.0, 6.0], [31000.0, 5.0], [30800.0, 4.0], [32400.0, 2.0], [32200.0, 2.0], [32000.0, 4.0], [31800.0, 3.0], [32600.0, 87.0], [34400.0, 5.0], [34000.0, 4.0], [32800.0, 12.0], [33200.0, 6.0], [33600.0, 6.0], [35200.0, 1.0], [34300.0, 3.0], [34700.0, 2.0], [33500.0, 7.0], [33900.0, 1.0], [33100.0, 6.0], [35100.0, 1.0], [16700.0, 1.0], [17300.0, 1.0], [16500.0, 1.0], [17500.0, 2.0], [17700.0, 1.0], [17900.0, 2.0], [18500.0, 1.0], [18700.0, 1.0], [18900.0, 1.0], [19100.0, 1.0], [19300.0, 1.0], [19500.0, 4.0], [19700.0, 4.0], [19900.0, 6.0], [20100.0, 2.0], [20300.0, 4.0], [21300.0, 1.0], [25500.0, 1.0], [26100.0, 4.0], [26300.0, 4.0], [26500.0, 4.0], [25900.0, 2.0], [26900.0, 5.0], [27100.0, 3.0], [26700.0, 3.0], [27300.0, 6.0], [27500.0, 3.0], [27700.0, 5.0], [28500.0, 2.0], [28300.0, 1.0], [29500.0, 5.0], [29300.0, 3.0], [29100.0, 1.0], [28900.0, 1.0], [28700.0, 1.0], [30700.0, 9.0], [30500.0, 5.0], [30300.0, 5.0], [30100.0, 4.0], [29900.0, 6.0], [29700.0, 3.0], [31700.0, 3.0], [31500.0, 4.0], [31300.0, 3.0], [31100.0, 2.0], [30900.0, 5.0], [32500.0, 4.0], [32300.0, 3.0], [32100.0, 3.0], [32700.0, 5.0], [31900.0, 3.0], [33400.0, 10.0], [33800.0, 6.0], [33000.0, 11.0], [34200.0, 1.0], [35000.0, 1.0], [39000.0, 132.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 105521.0, "series": [{"data": [[0.0, 105521.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 29.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 909.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 86.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 118.61631944444456, "minX": 1.73184684E12, "maxY": 876.4481165292044, "series": [{"data": [[1.73184684E12, 118.61631944444456], [1.7318469E12, 876.4481165292044]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7318469E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 12.0, "minX": 1.0, "maxY": 18290.322916666664, "series": [{"data": [[2.0, 3901.5000000000005], [3.0, 3547.8181818181815], [4.0, 3903.7], [5.0, 3903.8999999999996], [6.0, 3905.2999999999997], [7.0, 4338.222222222223], [8.0, 3256.666666666667], [9.0, 3551.181818181818], [10.0, 3907.5], [11.0, 3907.9], [12.0, 3007.5384615384614], [13.0, 3554.1818181818185], [14.0, 3259.166666666667], [15.0, 3557.272727272727], [16.0, 3912.4000000000005], [17.0, 3010.769230769231], [18.0, 4343.666666666667], [19.0, 2799.0714285714284], [20.0, 3555.1818181818185], [21.0, 3263.0], [22.0, 3561.5454545454545], [23.0, 4346.0], [24.0, 3562.727272727273], [25.0, 3012.153846153846], [26.0, 2801.0000000000005], [27.0, 3265.1666666666665], [28.0, 3558.4545454545455], [29.0, 3269.25], [30.0, 3265.1666666666665], [31.0, 3019.153846153846], [32.0, 3561.272727272727], [33.0, 3264.75], [34.0, 3018.923076923077], [35.0, 2800.714285714286], [36.0, 3922.0], [37.0, 2801.5714285714284], [38.0, 3024.153846153846], [39.0, 19.3], [40.0, 1896.642857142857], [41.0, 3920.2], [42.0, 3271.5], [43.0, 3032.0], [44.0, 3273.9166666666665], [45.0, 3580.5454545454545], [46.0, 3026.3846153846152], [47.0, 3573.090909090909], [48.0, 2823.214285714286], [49.0, 3571.818181818182], [50.0, 3276.0], [51.0, 2825.9285714285716], [52.0, 3277.25], [53.0, 2643.2], [54.0, 3028.923076923077], [55.0, 3027.4615384615386], [56.0, 3296.0], [57.0, 2813.5714285714284], [58.0, 2829.8571428571427], [59.0, 26.307692307692314], [60.0, 7115.0], [61.0, 3572.090909090909], [63.0, 2382.727272727273], [62.0, 2937.5555555555557], [65.0, 2978.214285714286], [64.0, 2849.6428571428573], [66.0, 3008.076923076923], [67.0, 3015.230769230769], [68.0, 2809.214285714286], [69.0, 3589.3636363636365], [70.0, 1040.076923076923], [71.0, 2821.642857142857], [72.0, 3287.416666666667], [73.0, 3327.166666666667], [74.0, 3294.9166666666665], [75.0, 4923.75], [76.0, 2651.866666666667], [77.0, 3300.9166666666665], [78.0, 2854.214285714286], [79.0, 3295.5], [80.0, 2826.785714285714], [81.0, 2478.0625], [82.0, 2353.176470588235], [83.0, 2823.3571428571427], [84.0, 2637.2], [85.0, 2636.0666666666666], [86.0, 2349.176470588235], [87.0, 2331.4117647058824], [88.0, 2822.3571428571427], [89.0, 2846.8571428571427], [90.0, 3285.5833333333335], [91.0, 2636.8], [92.0, 3286.75], [93.0, 2823.714285714286], [94.0, 3066.153846153846], [95.0, 2474.0625], [96.0, 2821.714285714286], [97.0, 2089.5263157894738], [98.0, 2358.470588235294], [99.0, 2331.764705882353], [100.0, 2819.3571428571427], [101.0, 2495.1875], [102.0, 2195.1666666666665], [103.0, 2811.214285714286], [104.0, 2812.214285714286], [105.0, 2349.9411764705883], [106.0, 1980.6], [107.0, 2467.9375], [108.0, 2814.1428571428573], [109.0, 2853.071428571429], [110.0, 2630.133333333333], [111.0, 2630.866666666667], [112.0, 2324.8823529411766], [113.0, 3063.230769230769], [114.0, 2815.214285714286], [115.0, 3280.0], [116.0, 3279.5], [117.0, 4364.777777777777], [119.0, 5614.285714285715], [118.0, 3285.3333333333335], [122.0, 2474.3125], [121.0, 2822.642857142857], [120.0, 2669.6], [123.0, 1988.6], [124.0, 2803.285714285714], [125.0, 2319.0], [126.0, 2471.625], [127.0, 2507.5625], [128.0, 2474.125], [129.0, 2086.947368421053], [130.0, 3030.923076923077], [131.0, 1984.8235294117646], [132.0, 2466.875], [133.0, 2195.944444444445], [134.0, 2815.928571428571], [135.0, 2672.7333333333336], [136.0, 2997.909090909091], [137.0, 3289.5], [138.0, 2209.666666666667], [139.0, 2480.0625], [140.0, 2259.7333333333336], [141.0, 2077.9375], [142.0, 2211.133333333333], [143.0, 1849.4999999999998], [144.0, 2261.4], [145.0, 660.6666666666666], [146.0, 2210.2666666666664], [147.0, 2545.0], [148.0, 2213.2], [149.0, 539.0666666666667], [150.0, 436.88235294117646], [151.0, 2550.9230769230767], [152.0, 2372.8571428571427], [153.0, 2373.714285714286], [154.0, 2271.866666666667], [155.0, 2378.785714285714], [156.0, 2378.785714285714], [157.0, 2084.0], [158.0, 2080.6875], [159.0, 2429.3571428571427], [160.0, 2544.769230769231], [161.0, 1845.7777777777778], [162.0, 2209.3333333333335], [163.0, 2209.2666666666664], [164.0, 2125.6875], [165.0, 1952.2941176470588], [166.0, 2071.875], [167.0, 1951.9411764705883], [168.0, 2071.9375], [169.0, 1627.3333333333333], [170.0, 1950.6470588235295], [171.0, 2204.9333333333334], [172.0, 2361.1428571428573], [173.0, 2126.8125], [174.0, 1750.4736842105262], [175.0, 2752.1666666666665], [176.0, 2753.0], [177.0, 2753.0833333333335], [178.0, 2366.0714285714284], [179.0, 154.0], [180.0, 4696.785714285715], [181.0, 2081.5], [182.0, 2373.3571428571427], [183.0, 1961.7058823529412], [187.0, 2360.857142857143], [186.0, 2362.0], [185.0, 2617.3846153846157], [184.0, 2216.0], [188.0, 797.7222222222223], [189.0, 2518.7692307692305], [190.0, 1829.2222222222222], [191.0, 1940.235294117647], [192.0, 1840.4999999999998], [193.0, 1710.0499999999997], [194.0, 1842.3333333333333], [195.0, 2206.2], [196.0, 1747.842105263158], [197.0, 1897.5555555555557], [198.0, 321.3913043478261], [199.0, 1946.235294117647], [200.0, 1945.7058823529412], [201.0, 2538.076923076923], [202.0, 2435.214285714286], [203.0, 2546.230769230769], [204.0, 460.9375], [205.0, 491.6], [206.0, 2377.071428571429], [207.0, 2222.866666666667], [208.0, 600.7857142857142], [209.0, 2378.714285714286], [210.0, 53.199999999999996], [211.0, 4120.75], [212.0, 2374.0714285714284], [213.0, 2764.4999999999995], [214.0, 2643.6153846153843], [215.0, 2379.0714285714284], [216.0, 1965.4705882352941], [217.0, 2378.285714285714], [218.0, 2560.0769230769233], [219.0, 2089.3125], [220.0, 2462.785714285714], [221.0, 476.5], [222.0, 2232.4], [223.0, 2099.0625], [224.0, 2232.9333333333334], [225.0, 2099.0625], [226.0, 2045.8235294117646], [227.0, 1772.2105263157894], [228.0, 2092.6875], [229.0, 2387.357142857143], [230.0, 2389.357142857143], [231.0, 2230.9333333333334], [235.0, 869.2571428571432], [234.0, 23.70731707317074], [233.0, 37.36363636363636], [232.0, 2662.4615384615386], [236.0, 140.35714285714283], [237.0, 2533.153846153846], [238.0, 1744.6842105263158], [239.0, 1855.0555555555557], [240.0, 2392.3571428571427], [241.0, 48.64999999999999], [242.0, 1781.4736842105262], [243.0, 2322.9333333333334], [244.0, 68.35714285714286], [245.0, 1691.25], [246.0, 1982.235294117647], [247.0, 52.70588235294117], [248.0, 1606.5238095238094], [249.0, 167.6153846153846], [250.0, 1356.32], [251.0, 1980.4117647058824], [252.0, 38.411764705882355], [253.0, 1533.2727272727273], [254.0, 1475.3478260869565], [255.0, 60.47368421052631], [257.0, 1888.5555555555557], [256.0, 1227.8275862068965], [258.0, 43.807692307692314], [259.0, 1306.3461538461538], [260.0, 47.125], [261.0, 1858.3684210526317], [262.0, 39.44999999999999], [263.0, 1540.5000000000002], [264.0, 47.8695652173913], [270.0, 1299.7307692307693], [271.0, 41.38095238095238], [268.0, 1404.375], [269.0, 39.52631578947368], [265.0, 1252.2962962962963], [266.0, 1360.92], [267.0, 115.05], [273.0, 42.95], [272.0, 1348.4800000000002], [274.0, 1079.6969696969697], [275.0, 1405.7916666666667], [276.0, 39.00000000000001], [277.0, 1097.0], [278.0, 38.391304347826086], [279.0, 1347.1599999999999], [280.0, 118.66666666666666], [286.0, 54.9], [287.0, 184.27272727272728], [281.0, 896.7368421052631], [283.0, 31.592592592592585], [282.0, 1355.2399999999998], [285.0, 1123.3684210526317], [284.0, 942.0555555555555], [289.0, 35.92307692307693], [288.0, 29.23076923076923], [290.0, 48.692307692307686], [291.0, 58.307692307692314], [292.0, 68.3], [293.0, 74.66666666666666], [294.0, 182.13333333333333], [295.0, 67.61538461538461], [296.0, 67.64285714285714], [302.0, 60.41666666666668], [303.0, 63.38461538461538], [300.0, 60.05], [301.0, 177.66666666666666], [297.0, 65.68749999999999], [298.0, 63.785714285714285], [299.0, 60.333333333333336], [305.0, 68.00000000000001], [304.0, 65.99999999999999], [306.0, 68.00000000000001], [307.0, 180.75], [308.0, 1928.8125], [309.0, 68.15384615384616], [310.0, 65.375], [311.0, 65.94117647058825], [312.0, 64.44444444444446], [318.0, 57.375], [319.0, 59.53333333333333], [316.0, 59.3], [317.0, 51.17647058823529], [313.0, 62.07142857142857], [314.0, 171.64705882352945], [315.0, 61.8], [321.0, 57.75], [320.0, 174.64705882352942], [322.0, 54.83333333333333], [323.0, 62.57142857142857], [324.0, 63.24999999999999], [325.0, 59.625], [326.0, 213.07692307692307], [327.0, 64.84615384615385], [328.0, 2003.5882352941176], [332.0, 64.85714285714286], [334.0, 64.15384615384616], [333.0, 225.23076923076923], [335.0, 64.1875], [329.0, 65.19999999999999], [330.0, 63.294117647058826], [331.0, 63.42857142857143], [337.0, 61.92857142857143], [336.0, 62.57142857142857], [338.0, 18290.322916666664], [339.0, 1050.5], [340.0, 1792.6315789473683], [341.0, 26.28571428571429], [342.0, 41.1578947368421], [343.0, 953.8181818181819], [344.0, 1573.6818181818182], [350.0, 551.4305555555555], [351.0, 57.21052631578947], [348.0, 43.08695652173912], [349.0, 57.93333333333333], [345.0, 38.10344827586207], [346.0, 1062.0857142857144], [347.0, 1036.5], [353.0, 42.38461538461538], [352.0, 1285.3703703703704], [354.0, 831.5263157894736], [355.0, 935.8918918918919], [356.0, 1954.5], [357.0, 28.133333333333322], [358.0, 262.3333333333333], [359.0, 36.25000000000001], [360.0, 55.50000000000001], [366.0, 100.97058823529414], [367.0, 48.84210526315789], [364.0, 41.448275862068954], [365.0, 1582.5000000000002], [361.0, 1444.7272727272727], [362.0, 36.088235294117645], [363.0, 1060.1], [369.0, 29.937499999999996], [368.0, 1287.7407407407409], [370.0, 52.5625], [371.0, 775.2444444444445], [372.0, 652.408163265306], [373.0, 831.9555555555556], [374.0, 607.7540983606558], [375.0, 13.499999999999998], [377.0, 21.666666666666664], [376.0, 12.0], [382.0, 231.27999999999997], [383.0, 27.619047619047613], [380.0, 1370.3478260869565], [381.0, 77.14285714285714], [378.0, 2039.1764705882354], [379.0, 24.822222222222223], [384.0, 1182.5555555555554], [385.0, 54.09677419354839], [387.0, 2209.285714285714], [386.0, 14.909090909090908], [396.0, 26.000000000000004], [397.0, 49.7], [398.0, 862.4634146341463], [399.0, 53.92857142857142], [391.0, 21.599999999999994], [392.0, 999.6285714285714], [390.0, 44.28571428571429], [389.0, 722.3902439024391], [388.0, 87.0576923076923], [393.0, 102.54545454545455], [394.0, 557.0175438596491], [395.0, 1163.3], [401.0, 1217.0967741935485], [400.0, 41.63333333333335], [402.0, 29.625000000000004], [403.0, 55.58823529411765], [404.0, 660.0555555555557], [405.0, 53.93749999999999], [406.0, 1744.1499999999999], [407.0, 33.7450980392157], [408.0, 1475.5833333333335], [414.0, 42.51724137931034], [415.0, 39.31034482758619], [412.0, 1271.7857142857144], [413.0, 44.30303030303031], [409.0, 61.31578947368421], [410.0, 128.0], [411.0, 43.882352941176464], [417.0, 238.9333333333333], [416.0, 633.8392857142858], [418.0, 59.1764705882353], [419.0, 57.64705882352941], [420.0, 2064.5882352941176], [421.0, 55.46666666666667], [422.0, 54.857142857142854], [423.0, 54.599999999999994], [424.0, 243.6], [430.0, 53.47058823529412], [431.0, 275.69230769230774], [428.0, 53.37499999999999], [429.0, 53.27777777777778], [425.0, 53.22222222222223], [426.0, 49.588235294117645], [427.0, 52.625], [433.0, 56.18750000000001], [432.0, 53.79999999999999], [434.0, 62.714285714285715], [435.0, 64.6], [436.0, 68.93333333333334], [437.0, 72.4], [438.0, 73.56249999999999], [439.0, 267.0666666666667], [440.0, 69.42857142857143], [446.0, 68.42857142857143], [447.0, 1965.2222222222222], [444.0, 68.31250000000001], [445.0, 67.73333333333333], [441.0, 74.12499999999999], [442.0, 67.19999999999999], [443.0, 72.5], [448.0, 66.15384615384615], [451.0, 55.684210526315795], [460.0, 330.8453608247422], [461.0, 1187.4074074074074], [462.0, 157.89285714285717], [463.0, 41.179487179487175], [450.0, 9366.905797101444], [449.0, 66.6875], [452.0, 37.399999999999984], [453.0, 47.54545454545453], [454.0, 442.6842105263158], [455.0, 21.051724137931036], [456.0, 551.9824561403509], [457.0, 495.8571428571429], [458.0, 1636.0000000000002], [459.0, 48.576923076923094], [465.0, 31.157894736842106], [464.0, 1249.3999999999999], [466.0, 2119.866666666667], [467.0, 305.2264150943398], [468.0, 46.391304347826086], [469.0, 1636.095238095238], [470.0, 1829.3], [471.0, 394.79012345678996], [472.0, 35.43589743589743], [478.0, 270.94117647058823], [479.0, 498.07462686567163], [476.0, 33.15094339622641], [477.0, 490.8714285714285], [473.0, 338.8], [474.0, 32.68656716417912], [475.0, 1118.2413793103449], [481.0, 45.457142857142856], [480.0, 1600.9], [482.0, 39.90697674418605], [483.0, 515.015625], [484.0, 57.0], [485.0, 70.88888888888889], [486.0, 700.3829787234042], [487.0, 110.65909090909092], [488.0, 1426.5], [494.0, 592.6363636363636], [495.0, 45.6], [492.0, 1302.56], [493.0, 34.394366197183096], [489.0, 32.214285714285715], [490.0, 2095.6], [491.0, 32.753246753246735], [497.0, 49.00000000000001], [496.0, 573.6349206349207], [498.0, 113.53125], [499.0, 49.61538461538461], [500.0, 55.31818181818183], [505.0, 61.307692307692314], [506.0, 66.42857142857143], [507.0, 67.5], [504.0, 308.92857142857144], [510.0, 43.666666666666664], [511.0, 49.0], [508.0, 67.99999999999999], [509.0, 414.7], [503.0, 66.0], [502.0, 72.2], [501.0, 1140.6071428571427], [515.0, 86.15384615384616], [512.0, 48.733333333333334], [526.0, 688.8571428571429], [527.0, 155.54838709677423], [524.0, 514.7941176470588], [525.0, 47.33333333333335], [522.0, 4603.610169491527], [523.0, 103.2441860465116], [513.0, 50.666666666666664], [514.0, 2154.9333333333334], [516.0, 107.66666666666667], [517.0, 116.53333333333333], [518.0, 124.46666666666667], [519.0, 363.8571428571429], [528.0, 37.486486486486484], [542.0, 387.40860215053766], [543.0, 581.695652173913], [540.0, 1006.3823529411764], [541.0, 28.506329113924046], [538.0, 707.7142857142857], [539.0, 29.968253968253965], [536.0, 42.550000000000004], [537.0, 33.82926829268292], [529.0, 724.3877551020408], [530.0, 31.624999999999996], [531.0, 49.47058823529412], [532.0, 395.94444444444446], [533.0, 662.2500000000001], [534.0, 31.745762711864423], [535.0, 608.015873015873], [520.0, 2319.714285714286], [521.0, 95.16666666666669], [547.0, 33.86538461538462], [544.0, 37.186046511627914], [558.0, 31.7], [559.0, 510.46250000000003], [556.0, 968.7567567567568], [557.0, 49.375], [554.0, 36.99999999999999], [555.0, 359.0094339622641], [545.0, 44.318181818181806], [546.0, 951.2972972972973], [548.0, 35.52272727272728], [549.0, 1498.3913043478262], [550.0, 29.23958333333334], [551.0, 2115.3888888888887], [560.0, 36.829268292682926], [574.0, 35.96874999999999], [575.0, 439.4705882352941], [568.0, 55.55], [570.0, 969.8918918918919], [569.0, 342.4594594594596], [572.0, 579.6923076923078], [571.0, 32.28421052631576], [573.0, 566.4307692307692], [561.0, 356.0094339622642], [562.0, 50.631578947368425], [563.0, 899.375], [564.0, 24.25974025974026], [565.0, 47.699999999999996], [566.0, 1410.2800000000002], [567.0, 277.35294117647067], [552.0, 36.62745098039215], [553.0, 37.55813953488372], [579.0, 210.81410256410257], [576.0, 22.909090909090907], [590.0, 46.40909090909091], [591.0, 316.9322033898306], [588.0, 323.72277227722776], [589.0, 682.4000000000001], [586.0, 251.88636363636368], [587.0, 52.85714285714286], [577.0, 29.77777777777778], [578.0, 254.0317460317459], [580.0, 899.3636363636364], [581.0, 230.84507042253526], [582.0, 36.44776119402986], [583.0, 1106.9354838709678], [592.0, 45.04545454545455], [606.0, 40.31818181818181], [607.0, 585.0545454545454], [604.0, 43.065217391304344], [605.0, 494.8217054263564], [602.0, 1099.25], [603.0, 40.07228915662651], [600.0, 737.85], [601.0, 343.3030303030302], [593.0, 51.21052631578946], [594.0, 597.5471698113208], [595.0, 259.3664122137406], [596.0, 61.571428571428584], [597.0, 58.63157894736842], [598.0, 315.8846153846155], [599.0, 85.44578313253012], [584.0, 270.29166666666646], [585.0, 33.31395348837208], [611.0, 41.58163265306125], [608.0, 38.10833333333331], [622.0, 1959.0625], [623.0, 64.44776119402985], [620.0, 73.03030303030306], [621.0, 82.39999999999998], [618.0, 376.2844036697247], [619.0, 80.6842105263158], [609.0, 405.29787234042556], [610.0, 639.2352941176472], [612.0, 235.96688741721852], [613.0, 89.99999999999999], [614.0, 1760.2777777777778], [615.0, 45.707865168539314], [624.0, 52.21538461538461], [639.0, 45.552941176470576], [637.0, 39.234567901234556], [638.0, 456.6216216216216], [636.0, 336.79999999999995], [635.0, 466.86111111111114], [634.0, 255.9219858156028], [633.0, 44.61016949152543], [632.0, 44.47311827956989], [625.0, 62.45161290322581], [626.0, 456.0357142857143], [627.0, 89.41071428571429], [628.0, 56.324324324324316], [629.0, 276.2], [630.0, 55.00000000000001], [631.0, 1329.7916666666667], [616.0, 69.6818181818182], [617.0, 54.97727272727272], [643.0, 354.8787878787879], [640.0, 444.7564102564103], [654.0, 441.69230769230774], [655.0, 332.19266055045875], [652.0, 37.90322580645161], [653.0, 556.671875], [650.0, 47.26136363636364], [651.0, 353.21359223300965], [641.0, 722.0128205128206], [642.0, 44.89473684210525], [644.0, 43.968253968253975], [645.0, 513.078947368421], [646.0, 44.32530120481928], [647.0, 449.44155844155847], [656.0, 55.473684210526315], [670.0, 45.569620253164544], [671.0, 421.9767441860465], [668.0, 81.94117647058823], [669.0, 400.3592233009709], [666.0, 205.01851851851856], [667.0, 50.2808988764045], [664.0, 50.62222222222221], [665.0, 434.7831325301205], [657.0, 49.271428571428594], [658.0, 249.59477124183002], [659.0, 72.88235294117648], [660.0, 427.4880952380952], [661.0, 362.32584269662925], [662.0, 171.03703703703704], [663.0, 421.1744186046511], [648.0, 44.97752808988765], [649.0, 428.0609756097561], [675.0, 55.550724637681164], [672.0, 54.16304347826088], [686.0, 929.8749999999999], [687.0, 241.94082840236686], [684.0, 1974.764705882353], [685.0, 50.094339622641506], [682.0, 77.42105263157895], [683.0, 278.6546762589928], [673.0, 59.00000000000001], [674.0, 377.78], [676.0, 59.85], [677.0, 94.76470588235293], [678.0, 781.936170212766], [679.0, 144.27083333333334], [688.0, 313.42105263157896], [703.0, 49.612612612612615], [701.0, 141.12411347517735], [702.0, 360.3764705882353], [699.0, 51.50819672131148], [700.0, 655.1860465116279], [698.0, 202.93984962406012], [697.0, 64.1875], [696.0, 50.827272727272714], [689.0, 490.19512195121956], [690.0, 55.921568627450974], [691.0, 64.83999999999999], [692.0, 369.80582524271847], [693.0, 53.192771084337345], [695.0, 459.98749999999995], [694.0, 65.82608695652173], [680.0, 45.85714285714285], [681.0, 57.64705882352941], [707.0, 55.378378378378386], [704.0, 684.8666666666666], [718.0, 60.81818181818182], [719.0, 368.24705882352947], [716.0, 356.2359550561798], [717.0, 56.58252427184466], [714.0, 235.74999999999997], [715.0, 63.12000000000002], [705.0, 235.7142857142858], [706.0, 47.066666666666656], [708.0, 346.4782608695652], [709.0, 56.45370370370372], [710.0, 359.30232558139545], [711.0, 207.534090909091], [720.0, 54.27884615384616], [734.0, 110.5978260869565], [735.0, 406.67326732673257], [732.0, 67.8], [733.0, 330.6907216494845], [730.0, 327.4591836734694], [731.0, 147.82269503546092], [728.0, 72.81249999999999], [729.0, 131.54202898550716], [721.0, 68.43750000000001], [722.0, 817.3913043478259], [723.0, 90.18320610687024], [724.0, 63.08695652173913], [725.0, 324.4752475247525], [726.0, 58.3301886792453], [727.0, 558.9074074074075], [712.0, 73.56818181818183], [713.0, 159.154716981132], [739.0, 62.84615384615385], [736.0, 59.265957446808514], [750.0, 67.0217391304348], [751.0, 336.08080808080797], [748.0, 295.71551724137936], [749.0, 61.94897959183672], [746.0, 65.43939393939398], [747.0, 68.00000000000001], [737.0, 65.24999999999999], [738.0, 319.92233009708747], [740.0, 69.85714285714282], [741.0, 802.212962962963], [742.0, 155.30645161290315], [743.0, 390.23353293413174], [752.0, 59.664000000000016], [766.0, 63.33333333333336], [767.0, 62.84210526315789], [760.0, 72.72222222222224], [762.0, 63.551724137931], [761.0, 172.05809128630705], [764.0, 63.125000000000014], [763.0, 200.00000000000003], [765.0, 233.48677248677257], [753.0, 231.56687898089183], [754.0, 67.67391304347825], [755.0, 338.45299145299157], [756.0, 63.65432098765433], [757.0, 65.42500000000001], [758.0, 214.0628571428571], [759.0, 282.3333333333334], [744.0, 76.5217391304348], [745.0, 341.63793103448296], [771.0, 402.8101265822786], [768.0, 367.6716981132075], [782.0, 67.86440677966098], [783.0, 352.7216494845361], [780.0, 492.88489208633075], [781.0, 67.6421052631579], [778.0, 378.29370629370646], [779.0, 105.14999999999999], [769.0, 61.80733944954129], [770.0, 140.98387096774192], [772.0, 136.1256983240221], [773.0, 45.919999999999995], [774.0, 913.34375], [775.0, 67.4909090909091], [784.0, 64.43939393939395], [798.0, 72.81249999999999], [799.0, 74.5294117647059], [796.0, 74.17647058823529], [797.0, 74.125], [794.0, 76.13333333333333], [795.0, 184.4291187739464], [792.0, 75.94444444444443], [793.0, 76.06666666666668], [785.0, 72.32], [786.0, 1007.3559322033899], [787.0, 57.81818181818181], [788.0, 228.55113636363663], [789.0, 80.84210526315789], [790.0, 356.42105263157896], [791.0, 73.78378378378379], [776.0, 72.31395348837209], [777.0, 97.53333333333333], [803.0, 73.10526315789474], [800.0, 348.45000000000005], [814.0, 75.46153846153847], [815.0, 78.5909090909091], [812.0, 74.21052631578947], [813.0, 74.89473684210526], [810.0, 358.9473684210526], [811.0, 74.22222222222221], [801.0, 85.00000000000001], [802.0, 72.41176470588235], [804.0, 71.61111111111111], [805.0, 70.49999999999999], [806.0, 278.62500000000006], [807.0, 74.64999999999999], [816.0, 409.8372093023256], [826.0, 82.6875], [828.0, 89.93333333333334], [827.0, 646.6000000000001], [830.0, 97.5748031496063], [829.0, 93.32584269662921], [831.0, 451.4000000000001], [824.0, 82.4722222222222], [825.0, 81.92857142857142], [817.0, 83.70370370370371], [818.0, 76.47058823529412], [819.0, 76.125], [820.0, 399.76470588235287], [821.0, 78.28571428571428], [822.0, 80.4736842105263], [823.0, 84.03448275862067], [808.0, 84.48780487804879], [809.0, 81.58064516129032], [835.0, 87.33333333333333], [832.0, 84.06666666666666], [846.0, 97.80412371134021], [847.0, 79.58823529411767], [844.0, 254.71264367816093], [845.0, 77.23529411764707], [842.0, 78.81250000000001], [843.0, 77.92857142857142], [833.0, 85.74999999999999], [834.0, 86.5625], [836.0, 84.87500000000001], [837.0, 59.666666666666664], [838.0, 69.72222222222221], [839.0, 73.93333333333334], [848.0, 79.94117647058823], [862.0, 455.50000000000006], [863.0, 90.0], [860.0, 87.61111111111111], [861.0, 88.11111111111111], [858.0, 85.82352941176471], [859.0, 86.37499999999999], [856.0, 86.18749999999999], [857.0, 84.00000000000001], [849.0, 89.48387096774192], [850.0, 99.8], [851.0, 161.0], [852.0, 287.3502824858757], [853.0, 86.0], [854.0, 92.32539682539682], [855.0, 86.11111111111109], [840.0, 395.1111111111111], [841.0, 81.8], [867.0, 93.26315789473682], [864.0, 197.02816901408457], [878.0, 101.61538461538461], [879.0, 117.3], [876.0, 90.12500000000001], [877.0, 221.20437956204373], [874.0, 91.05882352941177], [875.0, 90.13333333333333], [865.0, 92.05555555555556], [866.0, 92.95], [868.0, 90.66666666666664], [869.0, 88.49999999999999], [870.0, 88.81249999999999], [871.0, 87.99999999999997], [880.0, 112.6], [895.0, 89.6842105263158], [893.0, 301.8323353293412], [894.0, 428.2777777777778], [891.0, 81.73333333333335], [892.0, 87.88235294117646], [890.0, 79.63636363636364], [889.0, 88.16666666666667], [888.0, 100.4375], [881.0, 114.95652173913044], [882.0, 113.68421052631581], [883.0, 107.36842105263158], [884.0, 462.9411764705883], [885.0, 988.6666666666665], [886.0, 107.29411764705883], [887.0, 105.94444444444444], [872.0, 434.11764705882354], [873.0, 90.5], [899.0, 95.69230769230768], [896.0, 81.27272727272727], [910.0, 138.6833333333334], [911.0, 155.1048387096775], [908.0, 88.11764705882354], [909.0, 439.75], [906.0, 395.5238095238096], [907.0, 87.99999999999999], [897.0, 117.38], [898.0, 93.03846153846155], [900.0, 104.87096774193546], [901.0, 109.72413793103446], [902.0, 102.81818181818183], [903.0, 94.86666666666666], [912.0, 86.57894736842104], [926.0, 86.3125], [927.0, 510.93333333333345], [924.0, 133.1578947368421], [925.0, 86.44444444444446], [922.0, 87.06666666666668], [923.0, 87.80000000000001], [920.0, 87.06666666666666], [921.0, 85.22222222222221], [913.0, 115.25925925925925], [914.0, 84.6470588235294], [915.0, 97.8125], [916.0, 479.0000000000001], [917.0, 143.29999999999998], [918.0, 141.3777777777778], [919.0, 87.31249999999999], [904.0, 95.72222222222221], [905.0, 89.875], [931.0, 97.05555555555556], [928.0, 80.5], [942.0, 119.84615384615387], [943.0, 113.49999999999999], [940.0, 108.2], [941.0, 109.61538461538461], [938.0, 105.0], [939.0, 595.3076923076924], [929.0, 272.0455927051671], [930.0, 88.6923076923077], [932.0, 97.94444444444444], [933.0, 94.0], [934.0, 96.75], [935.0, 109.26666666666665], [944.0, 114.625], [959.0, 97.64285714285715], [957.0, 101.25], [958.0, 102.05882352941175], [955.0, 100.2222222222222], [956.0, 101.72222222222223], [954.0, 98.0], [953.0, 101.22222222222223], [952.0, 123.20000000000002], [945.0, 110.875], [946.0, 264.86062717770045], [947.0, 136.34375], [948.0, 149.80769230769226], [949.0, 115.00000000000001], [950.0, 139.91176470588235], [951.0, 349.0322580645162], [936.0, 143.28124999999997], [937.0, 103.24999999999999], [963.0, 83.58823529411765], [960.0, 105.73684210526316], [974.0, 94.89999999999999], [975.0, 97.85], [972.0, 340.64516129032256], [973.0, 91.6], [970.0, 104.14999999999999], [971.0, 141.8], [961.0, 484.764705882353], [962.0, 75.68750000000001], [964.0, 89.875], [965.0, 242.4732142857142], [966.0, 104.95652173913042], [967.0, 123.94871794871794], [976.0, 108.33999999999999], [990.0, 150.76595744680853], [991.0, 140.49999999999997], [988.0, 116.78571428571429], [989.0, 112.8125], [986.0, 94.46666666666668], [987.0, 237.88338192419832], [984.0, 115.13333333333334], [985.0, 106.0], [977.0, 111.43750000000001], [978.0, 108.8125], [979.0, 110.12499999999999], [980.0, 110.17647058823529], [981.0, 857.6666666666665], [982.0, 117.94117647058823], [983.0, 113.66666666666667], [968.0, 83.33333333333333], [969.0, 79.94999999999999], [995.0, 110.21428571428572], [992.0, 114.0625], [993.0, 110.58333333333331], [994.0, 593.5714285714286], [996.0, 105.13333333333335], [997.0, 103.72222222222221], [998.0, 98.13333333333334], [999.0, 121.36842105263159], [1000.0, 147.21323297426454], [1.0, 13004.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[855.963292505525, 300.02438406307226]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9715.5, "minX": 1.73184684E12, "maxY": 1747399.0666666667, "series": [{"data": [[1.73184684E12, 18643.766666666666], [1.7318469E12, 1747399.0666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73184684E12, 9715.5], [1.7318469E12, 350006.7833333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7318469E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 43.162847222222226, "minX": 1.73184684E12, "maxY": 307.1604591713692, "series": [{"data": [[1.73184684E12, 43.162847222222226], [1.7318469E12, 307.1604591713692]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7318469E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 43.16006944444446, "minX": 1.73184684E12, "maxY": 298.6978247238707, "series": [{"data": [[1.73184684E12, 43.16006944444446], [1.7318469E12, 298.6978247238707]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7318469E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.014583333333333368, "minX": 1.73184684E12, "maxY": 176.01492306950314, "series": [{"data": [[1.73184684E12, 0.014583333333333368], [1.7318469E12, 176.01492306950314]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7318469E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73184684E12, "maxY": 39020.0, "series": [{"data": [[1.73184684E12, 1153.0], [1.7318469E12, 39020.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73184684E12, 0.0], [1.7318469E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73184684E12, 52.0], [1.7318469E12, 63.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73184684E12, 361.3200000000015], [1.7318469E12, 33323.81000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73184684E12, 36.0], [1.7318469E12, 44.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73184684E12, 56.0], [1.7318469E12, 69.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7318469E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 11.0, "maxY": 39011.0, "series": [{"data": [[45.0, 32609.0], [44.0, 39009.5], [51.0, 39009.0], [1137.0, 28.0], [1465.0, 61.0], [1488.0, 10.0], [1695.0, 61.0], [1743.0, 38.0], [1752.0, 68.0], [1887.0, 82.0], [1978.0, 62.0], [2030.0, 74.0], [2236.0, 183.0], [2231.0, 170.0], [2347.0, 72.0], [2331.0, 160.0], [2656.0, 100.0], [2743.0, 97.0], [2867.0, 84.0], [2830.0, 124.0], [2907.0, 127.0], [11.0, 39008.0], [2996.0, 59.0], [3052.0, 94.0], [3018.0, 20.0], [3170.0, 64.0], [3080.0, 76.0], [3141.0, 95.0], [3182.0, 55.0], [3161.0, 50.0], [3115.0, 42.0], [3318.0, 65.0], [3252.0, 84.0], [3289.0, 70.0], [3271.0, 101.0], [3203.0, 110.0], [3281.0, 112.0], [3291.0, 60.0], [3383.0, 73.0], [3379.0, 108.0], [3533.0, 90.0], [3620.0, 103.0], [21.0, 32612.0], [26.0, 39011.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2236.0, 26206.0], [2347.0, 403.5], [2331.0, 19504.0], [2656.0, 13103.0], [2743.0, 26103.0], [2996.0, 1101.0], [3018.0, 32605.0], [3170.0, 1903.0], [3182.0, 26255.0], [3161.0, 26008.0], [3115.0, 26609.0], [3252.0, 13104.0], [3289.0, 26208.0], [3271.0, 6602.0], [3281.0, 19502.0], [3291.0, 26306.5], [3620.0, 22754.5], [1465.0, 101.0], [1695.0, 402.0], [1752.0, 100.0], [1887.0, 251.0], [1978.0, 301.0], [2030.0, 351.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3620.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 11.0, "maxY": 39011.0, "series": [{"data": [[45.0, 32609.0], [44.0, 39009.5], [51.0, 39009.0], [1137.0, 28.0], [1465.0, 61.0], [1488.0, 10.0], [1695.0, 61.0], [1743.0, 38.0], [1752.0, 68.0], [1887.0, 82.0], [1978.0, 62.0], [2030.0, 74.0], [2236.0, 183.0], [2231.0, 170.0], [2347.0, 72.0], [2331.0, 160.0], [2656.0, 100.0], [2743.0, 97.0], [2867.0, 84.0], [2830.0, 124.0], [2907.0, 127.0], [11.0, 39008.0], [2996.0, 59.0], [3052.0, 94.0], [3018.0, 20.0], [3170.0, 64.0], [3080.0, 76.0], [3141.0, 95.0], [3182.0, 55.0], [3161.0, 50.0], [3115.0, 42.0], [3318.0, 65.0], [3252.0, 84.0], [3289.0, 70.0], [3271.0, 101.0], [3203.0, 110.0], [3281.0, 112.0], [3291.0, 60.0], [3383.0, 73.0], [3379.0, 108.0], [3533.0, 90.0], [3620.0, 103.0], [21.0, 32612.0], [26.0, 39011.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2236.0, 0.0], [2347.0, 0.0], [2331.0, 0.0], [2656.0, 0.0], [2743.0, 0.0], [2996.0, 0.0], [3018.0, 0.0], [3170.0, 0.0], [3182.0, 0.0], [3161.0, 0.0], [3115.0, 0.0], [3252.0, 0.0], [3289.0, 0.0], [3271.0, 0.0], [3281.0, 0.0], [3291.0, 0.0], [3620.0, 0.0], [1465.0, 0.0], [1695.0, 0.0], [1752.0, 0.0], [1887.0, 0.0], [1978.0, 0.0], [2030.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3620.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 51.7, "minX": 1.73184684E12, "maxY": 1724.05, "series": [{"data": [[1.73184684E12, 51.7], [1.7318469E12, 1724.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7318469E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.4333333333333333, "minX": 1.73184684E12, "maxY": 1726.3166666666666, "series": [{"data": [[1.73184684E12, 48.0], [1.7318469E12, 1726.3166666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7318469E12, 1.4333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7318469E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4333333333333333, "minX": 1.73184684E12, "maxY": 1726.3166666666666, "series": [{"data": [[1.73184684E12, 48.0], [1.7318469E12, 1726.3166666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7318469E12, 1.4333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7318469E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4333333333333333, "minX": 1.73184684E12, "maxY": 1726.3166666666666, "series": [{"data": [[1.73184684E12, 48.0], [1.7318469E12, 1726.3166666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7318469E12, 1.4333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7318469E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

