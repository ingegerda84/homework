/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 44914.0, "series": [{"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 1.0], [0.3, 1.0], [0.4, 1.0], [0.5, 1.0], [0.6, 1.0], [0.7, 1.0], [0.8, 1.0], [0.9, 2.0], [1.0, 2.0], [1.1, 2.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 4.0], [1.7, 4.0], [1.8, 4.0], [1.9, 4.0], [2.0, 4.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 6.0], [3.0, 6.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 8.0], [6.0, 8.0], [6.1, 8.0], [6.2, 8.0], [6.3, 8.0], [6.4, 8.0], [6.5, 8.0], [6.6, 8.0], [6.7, 8.0], [6.8, 8.0], [6.9, 8.0], [7.0, 8.0], [7.1, 8.0], [7.2, 8.0], [7.3, 8.0], [7.4, 9.0], [7.5, 9.0], [7.6, 9.0], [7.7, 9.0], [7.8, 9.0], [7.9, 9.0], [8.0, 9.0], [8.1, 9.0], [8.2, 9.0], [8.3, 9.0], [8.4, 9.0], [8.5, 9.0], [8.6, 9.0], [8.7, 9.0], [8.8, 10.0], [8.9, 10.0], [9.0, 10.0], [9.1, 10.0], [9.2, 10.0], [9.3, 10.0], [9.4, 10.0], [9.5, 10.0], [9.6, 10.0], [9.7, 10.0], [9.8, 10.0], [9.9, 10.0], [10.0, 11.0], [10.1, 11.0], [10.2, 11.0], [10.3, 11.0], [10.4, 11.0], [10.5, 11.0], [10.6, 11.0], [10.7, 11.0], [10.8, 11.0], [10.9, 11.0], [11.0, 11.0], [11.1, 11.0], [11.2, 11.0], [11.3, 11.0], [11.4, 12.0], [11.5, 12.0], [11.6, 12.0], [11.7, 12.0], [11.8, 12.0], [11.9, 12.0], [12.0, 12.0], [12.1, 12.0], [12.2, 12.0], [12.3, 12.0], [12.4, 12.0], [12.5, 12.0], [12.6, 12.0], [12.7, 12.0], [12.8, 13.0], [12.9, 13.0], [13.0, 13.0], [13.1, 13.0], [13.2, 13.0], [13.3, 13.0], [13.4, 13.0], [13.5, 13.0], [13.6, 13.0], [13.7, 13.0], [13.8, 13.0], [13.9, 13.0], [14.0, 13.0], [14.1, 13.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 14.0], [15.4, 14.0], [15.5, 14.0], [15.6, 14.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 15.0], [16.4, 15.0], [16.5, 15.0], [16.6, 15.0], [16.7, 15.0], [16.8, 15.0], [16.9, 15.0], [17.0, 15.0], [17.1, 15.0], [17.2, 16.0], [17.3, 16.0], [17.4, 16.0], [17.5, 16.0], [17.6, 16.0], [17.7, 16.0], [17.8, 16.0], [17.9, 16.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 16.0], [18.4, 16.0], [18.5, 16.0], [18.6, 16.0], [18.7, 16.0], [18.8, 17.0], [18.9, 17.0], [19.0, 17.0], [19.1, 17.0], [19.2, 17.0], [19.3, 17.0], [19.4, 17.0], [19.5, 17.0], [19.6, 17.0], [19.7, 17.0], [19.8, 17.0], [19.9, 17.0], [20.0, 17.0], [20.1, 17.0], [20.2, 18.0], [20.3, 18.0], [20.4, 18.0], [20.5, 18.0], [20.6, 18.0], [20.7, 18.0], [20.8, 18.0], [20.9, 18.0], [21.0, 18.0], [21.1, 18.0], [21.2, 18.0], [21.3, 18.0], [21.4, 18.0], [21.5, 18.0], [21.6, 18.0], [21.7, 18.0], [21.8, 19.0], [21.9, 19.0], [22.0, 19.0], [22.1, 19.0], [22.2, 19.0], [22.3, 19.0], [22.4, 19.0], [22.5, 19.0], [22.6, 19.0], [22.7, 19.0], [22.8, 19.0], [22.9, 19.0], [23.0, 19.0], [23.1, 19.0], [23.2, 19.0], [23.3, 19.0], [23.4, 20.0], [23.5, 20.0], [23.6, 20.0], [23.7, 20.0], [23.8, 20.0], [23.9, 20.0], [24.0, 20.0], [24.1, 20.0], [24.2, 20.0], [24.3, 20.0], [24.4, 20.0], [24.5, 20.0], [24.6, 20.0], [24.7, 20.0], [24.8, 20.0], [24.9, 20.0], [25.0, 20.0], [25.1, 21.0], [25.2, 21.0], [25.3, 21.0], [25.4, 21.0], [25.5, 21.0], [25.6, 21.0], [25.7, 21.0], [25.8, 21.0], [25.9, 21.0], [26.0, 21.0], [26.1, 21.0], [26.2, 21.0], [26.3, 21.0], [26.4, 21.0], [26.5, 21.0], [26.6, 21.0], [26.7, 21.0], [26.8, 22.0], [26.9, 22.0], [27.0, 22.0], [27.1, 22.0], [27.2, 22.0], [27.3, 22.0], [27.4, 22.0], [27.5, 22.0], [27.6, 22.0], [27.7, 22.0], [27.8, 22.0], [27.9, 22.0], [28.0, 22.0], [28.1, 22.0], [28.2, 22.0], [28.3, 22.0], [28.4, 22.0], [28.5, 22.0], [28.6, 23.0], [28.7, 23.0], [28.8, 23.0], [28.9, 23.0], [29.0, 23.0], [29.1, 23.0], [29.2, 23.0], [29.3, 23.0], [29.4, 23.0], [29.5, 23.0], [29.6, 23.0], [29.7, 23.0], [29.8, 23.0], [29.9, 23.0], [30.0, 23.0], [30.1, 23.0], [30.2, 23.0], [30.3, 23.0], [30.4, 23.0], [30.5, 23.0], [30.6, 24.0], [30.7, 24.0], [30.8, 24.0], [30.9, 24.0], [31.0, 24.0], [31.1, 24.0], [31.2, 24.0], [31.3, 24.0], [31.4, 24.0], [31.5, 24.0], [31.6, 24.0], [31.7, 24.0], [31.8, 24.0], [31.9, 24.0], [32.0, 24.0], [32.1, 24.0], [32.2, 24.0], [32.3, 24.0], [32.4, 25.0], [32.5, 25.0], [32.6, 25.0], [32.7, 25.0], [32.8, 25.0], [32.9, 25.0], [33.0, 25.0], [33.1, 25.0], [33.2, 25.0], [33.3, 25.0], [33.4, 25.0], [33.5, 25.0], [33.6, 25.0], [33.7, 25.0], [33.8, 25.0], [33.9, 25.0], [34.0, 25.0], [34.1, 25.0], [34.2, 25.0], [34.3, 26.0], [34.4, 26.0], [34.5, 26.0], [34.6, 26.0], [34.7, 26.0], [34.8, 26.0], [34.9, 26.0], [35.0, 26.0], [35.1, 26.0], [35.2, 26.0], [35.3, 26.0], [35.4, 26.0], [35.5, 26.0], [35.6, 26.0], [35.7, 26.0], [35.8, 26.0], [35.9, 26.0], [36.0, 26.0], [36.1, 26.0], [36.2, 27.0], [36.3, 27.0], [36.4, 27.0], [36.5, 27.0], [36.6, 27.0], [36.7, 27.0], [36.8, 27.0], [36.9, 27.0], [37.0, 27.0], [37.1, 27.0], [37.2, 27.0], [37.3, 27.0], [37.4, 27.0], [37.5, 27.0], [37.6, 27.0], [37.7, 27.0], [37.8, 27.0], [37.9, 27.0], [38.0, 27.0], [38.1, 28.0], [38.2, 28.0], [38.3, 28.0], [38.4, 28.0], [38.5, 28.0], [38.6, 28.0], [38.7, 28.0], [38.8, 28.0], [38.9, 28.0], [39.0, 28.0], [39.1, 28.0], [39.2, 28.0], [39.3, 28.0], [39.4, 28.0], [39.5, 28.0], [39.6, 28.0], [39.7, 28.0], [39.8, 28.0], [39.9, 28.0], [40.0, 29.0], [40.1, 29.0], [40.2, 29.0], [40.3, 29.0], [40.4, 29.0], [40.5, 29.0], [40.6, 29.0], [40.7, 29.0], [40.8, 29.0], [40.9, 29.0], [41.0, 29.0], [41.1, 29.0], [41.2, 29.0], [41.3, 29.0], [41.4, 29.0], [41.5, 29.0], [41.6, 29.0], [41.7, 29.0], [41.8, 29.0], [41.9, 29.0], [42.0, 29.0], [42.1, 30.0], [42.2, 30.0], [42.3, 30.0], [42.4, 30.0], [42.5, 30.0], [42.6, 30.0], [42.7, 30.0], [42.8, 30.0], [42.9, 30.0], [43.0, 30.0], [43.1, 30.0], [43.2, 30.0], [43.3, 30.0], [43.4, 30.0], [43.5, 30.0], [43.6, 30.0], [43.7, 30.0], [43.8, 30.0], [43.9, 30.0], [44.0, 30.0], [44.1, 30.0], [44.2, 30.0], [44.3, 30.0], [44.4, 30.0], [44.5, 31.0], [44.6, 31.0], [44.7, 31.0], [44.8, 31.0], [44.9, 31.0], [45.0, 31.0], [45.1, 31.0], [45.2, 31.0], [45.3, 31.0], [45.4, 31.0], [45.5, 31.0], [45.6, 31.0], [45.7, 31.0], [45.8, 31.0], [45.9, 31.0], [46.0, 31.0], [46.1, 31.0], [46.2, 31.0], [46.3, 31.0], [46.4, 31.0], [46.5, 31.0], [46.6, 31.0], [46.7, 31.0], [46.8, 31.0], [46.9, 31.0], [47.0, 32.0], [47.1, 32.0], [47.2, 32.0], [47.3, 32.0], [47.4, 32.0], [47.5, 32.0], [47.6, 32.0], [47.7, 32.0], [47.8, 32.0], [47.9, 32.0], [48.0, 32.0], [48.1, 32.0], [48.2, 32.0], [48.3, 32.0], [48.4, 32.0], [48.5, 32.0], [48.6, 32.0], [48.7, 32.0], [48.8, 32.0], [48.9, 32.0], [49.0, 32.0], [49.1, 32.0], [49.2, 32.0], [49.3, 32.0], [49.4, 32.0], [49.5, 32.0], [49.6, 32.0], [49.7, 32.0], [49.8, 33.0], [49.9, 33.0], [50.0, 33.0], [50.1, 33.0], [50.2, 33.0], [50.3, 33.0], [50.4, 33.0], [50.5, 33.0], [50.6, 33.0], [50.7, 33.0], [50.8, 33.0], [50.9, 33.0], [51.0, 33.0], [51.1, 33.0], [51.2, 33.0], [51.3, 33.0], [51.4, 33.0], [51.5, 33.0], [51.6, 33.0], [51.7, 33.0], [51.8, 33.0], [51.9, 33.0], [52.0, 33.0], [52.1, 33.0], [52.2, 33.0], [52.3, 33.0], [52.4, 33.0], [52.5, 34.0], [52.6, 34.0], [52.7, 34.0], [52.8, 34.0], [52.9, 34.0], [53.0, 34.0], [53.1, 34.0], [53.2, 34.0], [53.3, 34.0], [53.4, 34.0], [53.5, 34.0], [53.6, 34.0], [53.7, 34.0], [53.8, 34.0], [53.9, 34.0], [54.0, 34.0], [54.1, 34.0], [54.2, 34.0], [54.3, 34.0], [54.4, 34.0], [54.5, 34.0], [54.6, 34.0], [54.7, 34.0], [54.8, 34.0], [54.9, 34.0], [55.0, 34.0], [55.1, 34.0], [55.2, 35.0], [55.3, 35.0], [55.4, 35.0], [55.5, 35.0], [55.6, 35.0], [55.7, 35.0], [55.8, 35.0], [55.9, 35.0], [56.0, 35.0], [56.1, 35.0], [56.2, 35.0], [56.3, 35.0], [56.4, 35.0], [56.5, 35.0], [56.6, 35.0], [56.7, 35.0], [56.8, 35.0], [56.9, 35.0], [57.0, 35.0], [57.1, 35.0], [57.2, 35.0], [57.3, 35.0], [57.4, 35.0], [57.5, 35.0], [57.6, 35.0], [57.7, 36.0], [57.8, 36.0], [57.9, 36.0], [58.0, 36.0], [58.1, 36.0], [58.2, 36.0], [58.3, 36.0], [58.4, 36.0], [58.5, 36.0], [58.6, 36.0], [58.7, 36.0], [58.8, 36.0], [58.9, 36.0], [59.0, 36.0], [59.1, 36.0], [59.2, 36.0], [59.3, 36.0], [59.4, 36.0], [59.5, 36.0], [59.6, 36.0], [59.7, 36.0], [59.8, 36.0], [59.9, 36.0], [60.0, 36.0], [60.1, 37.0], [60.2, 37.0], [60.3, 37.0], [60.4, 37.0], [60.5, 37.0], [60.6, 37.0], [60.7, 37.0], [60.8, 37.0], [60.9, 37.0], [61.0, 37.0], [61.1, 37.0], [61.2, 37.0], [61.3, 37.0], [61.4, 37.0], [61.5, 37.0], [61.6, 37.0], [61.7, 37.0], [61.8, 37.0], [61.9, 37.0], [62.0, 37.0], [62.1, 37.0], [62.2, 37.0], [62.3, 37.0], [62.4, 37.0], [62.5, 38.0], [62.6, 38.0], [62.7, 38.0], [62.8, 38.0], [62.9, 38.0], [63.0, 38.0], [63.1, 38.0], [63.2, 38.0], [63.3, 38.0], [63.4, 38.0], [63.5, 38.0], [63.6, 38.0], [63.7, 38.0], [63.8, 38.0], [63.9, 38.0], [64.0, 38.0], [64.1, 38.0], [64.2, 38.0], [64.3, 38.0], [64.4, 38.0], [64.5, 38.0], [64.6, 38.0], [64.7, 38.0], [64.8, 38.0], [64.9, 38.0], [65.0, 39.0], [65.1, 39.0], [65.2, 39.0], [65.3, 39.0], [65.4, 39.0], [65.5, 39.0], [65.6, 39.0], [65.7, 39.0], [65.8, 39.0], [65.9, 39.0], [66.0, 39.0], [66.1, 39.0], [66.2, 39.0], [66.3, 39.0], [66.4, 39.0], [66.5, 39.0], [66.6, 39.0], [66.7, 39.0], [66.8, 39.0], [66.9, 39.0], [67.0, 39.0], [67.1, 39.0], [67.2, 39.0], [67.3, 39.0], [67.4, 40.0], [67.5, 40.0], [67.6, 40.0], [67.7, 40.0], [67.8, 40.0], [67.9, 40.0], [68.0, 40.0], [68.1, 40.0], [68.2, 40.0], [68.3, 40.0], [68.4, 40.0], [68.5, 40.0], [68.6, 40.0], [68.7, 40.0], [68.8, 40.0], [68.9, 40.0], [69.0, 40.0], [69.1, 40.0], [69.2, 40.0], [69.3, 40.0], [69.4, 41.0], [69.5, 41.0], [69.6, 41.0], [69.7, 41.0], [69.8, 41.0], [69.9, 41.0], [70.0, 41.0], [70.1, 41.0], [70.2, 41.0], [70.3, 41.0], [70.4, 41.0], [70.5, 41.0], [70.6, 41.0], [70.7, 41.0], [70.8, 41.0], [70.9, 41.0], [71.0, 41.0], [71.1, 41.0], [71.2, 41.0], [71.3, 42.0], [71.4, 42.0], [71.5, 42.0], [71.6, 42.0], [71.7, 42.0], [71.8, 42.0], [71.9, 42.0], [72.0, 42.0], [72.1, 42.0], [72.2, 42.0], [72.3, 42.0], [72.4, 42.0], [72.5, 42.0], [72.6, 42.0], [72.7, 42.0], [72.8, 42.0], [72.9, 42.0], [73.0, 42.0], [73.1, 43.0], [73.2, 43.0], [73.3, 43.0], [73.4, 43.0], [73.5, 43.0], [73.6, 43.0], [73.7, 43.0], [73.8, 43.0], [73.9, 43.0], [74.0, 43.0], [74.1, 43.0], [74.2, 43.0], [74.3, 43.0], [74.4, 43.0], [74.5, 43.0], [74.6, 43.0], [74.7, 43.0], [74.8, 44.0], [74.9, 44.0], [75.0, 44.0], [75.1, 44.0], [75.2, 44.0], [75.3, 44.0], [75.4, 44.0], [75.5, 44.0], [75.6, 44.0], [75.7, 44.0], [75.8, 44.0], [75.9, 44.0], [76.0, 44.0], [76.1, 44.0], [76.2, 44.0], [76.3, 44.0], [76.4, 44.0], [76.5, 44.0], [76.6, 45.0], [76.7, 45.0], [76.8, 45.0], [76.9, 45.0], [77.0, 45.0], [77.1, 45.0], [77.2, 45.0], [77.3, 45.0], [77.4, 45.0], [77.5, 45.0], [77.6, 45.0], [77.7, 45.0], [77.8, 45.0], [77.9, 45.0], [78.0, 45.0], [78.1, 45.0], [78.2, 46.0], [78.3, 46.0], [78.4, 46.0], [78.5, 46.0], [78.6, 46.0], [78.7, 46.0], [78.8, 46.0], [78.9, 46.0], [79.0, 46.0], [79.1, 46.0], [79.2, 46.0], [79.3, 46.0], [79.4, 46.0], [79.5, 46.0], [79.6, 46.0], [79.7, 47.0], [79.8, 47.0], [79.9, 47.0], [80.0, 47.0], [80.1, 47.0], [80.2, 47.0], [80.3, 47.0], [80.4, 47.0], [80.5, 47.0], [80.6, 47.0], [80.7, 47.0], [80.8, 47.0], [80.9, 47.0], [81.0, 47.0], [81.1, 47.0], [81.2, 48.0], [81.3, 48.0], [81.4, 48.0], [81.5, 48.0], [81.6, 48.0], [81.7, 48.0], [81.8, 48.0], [81.9, 48.0], [82.0, 48.0], [82.1, 48.0], [82.2, 48.0], [82.3, 48.0], [82.4, 48.0], [82.5, 48.0], [82.6, 49.0], [82.7, 49.0], [82.8, 49.0], [82.9, 49.0], [83.0, 49.0], [83.1, 49.0], [83.2, 49.0], [83.3, 49.0], [83.4, 49.0], [83.5, 49.0], [83.6, 49.0], [83.7, 49.0], [83.8, 50.0], [83.9, 50.0], [84.0, 50.0], [84.1, 50.0], [84.2, 50.0], [84.3, 50.0], [84.4, 50.0], [84.5, 50.0], [84.6, 50.0], [84.7, 50.0], [84.8, 51.0], [84.9, 51.0], [85.0, 51.0], [85.1, 51.0], [85.2, 51.0], [85.3, 51.0], [85.4, 51.0], [85.5, 51.0], [85.6, 51.0], [85.7, 51.0], [85.8, 52.0], [85.9, 52.0], [86.0, 52.0], [86.1, 52.0], [86.2, 52.0], [86.3, 52.0], [86.4, 52.0], [86.5, 52.0], [86.6, 52.0], [86.7, 53.0], [86.8, 53.0], [86.9, 53.0], [87.0, 53.0], [87.1, 53.0], [87.2, 53.0], [87.3, 53.0], [87.4, 53.0], [87.5, 54.0], [87.6, 54.0], [87.7, 54.0], [87.8, 54.0], [87.9, 54.0], [88.0, 54.0], [88.1, 55.0], [88.2, 55.0], [88.3, 55.0], [88.4, 55.0], [88.5, 55.0], [88.6, 55.0], [88.7, 56.0], [88.8, 56.0], [88.9, 56.0], [89.0, 56.0], [89.1, 56.0], [89.2, 57.0], [89.3, 57.0], [89.4, 57.0], [89.5, 57.0], [89.6, 57.0], [89.7, 58.0], [89.8, 58.0], [89.9, 58.0], [90.0, 58.0], [90.1, 58.0], [90.2, 59.0], [90.3, 59.0], [90.4, 59.0], [90.5, 60.0], [90.6, 60.0], [90.7, 60.0], [90.8, 60.0], [90.9, 61.0], [91.0, 61.0], [91.1, 61.0], [91.2, 61.0], [91.3, 62.0], [91.4, 62.0], [91.5, 62.0], [91.6, 62.0], [91.7, 63.0], [91.8, 63.0], [91.9, 63.0], [92.0, 64.0], [92.1, 64.0], [92.2, 65.0], [92.3, 65.0], [92.4, 65.0], [92.5, 66.0], [92.6, 66.0], [92.7, 67.0], [92.8, 67.0], [92.9, 68.0], [93.0, 68.0], [93.1, 69.0], [93.2, 70.0], [93.3, 70.0], [93.4, 71.0], [93.5, 72.0], [93.6, 73.0], [93.7, 74.0], [93.8, 75.0], [93.9, 76.0], [94.0, 79.0], [94.1, 83.0], [94.2, 91.0], [94.3, 100.0], [94.4, 102.0], [94.5, 110.0], [94.6, 196.0], [94.7, 203.0], [94.8, 302.0], [94.9, 402.0], [95.0, 504.0], [95.1, 737.0], [95.2, 880.0], [95.3, 982.0], [95.4, 1020.0], [95.5, 1078.0], [95.6, 1111.0], [95.7, 1149.0], [95.8, 1198.0], [95.9, 1227.0], [96.0, 1274.0], [96.1, 1313.0], [96.2, 1357.0], [96.3, 1398.0], [96.4, 1424.0], [96.5, 1459.0], [96.6, 1482.0], [96.7, 1507.0], [96.8, 1535.0], [96.9, 1569.0], [97.0, 1594.0], [97.1, 1622.0], [97.2, 1664.0], [97.3, 1691.0], [97.4, 1718.0], [97.5, 1759.0], [97.6, 1791.0], [97.7, 1831.0], [97.8, 1870.0], [97.9, 1907.0], [98.0, 1967.0], [98.1, 2043.0], [98.2, 2128.0], [98.3, 2225.0], [98.4, 2426.0], [98.5, 2683.0], [98.6, 3065.0], [98.7, 3623.0], [98.8, 4539.0], [98.9, 6705.0], [99.0, 7280.0], [99.1, 7726.0], [99.2, 8264.0], [99.3, 13376.0], [99.4, 13841.0], [99.5, 19530.0], [99.6, 20042.0], [99.7, 20992.0], [99.8, 26340.0], [99.9, 27240.0], [100.0, 44914.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 94288.0, "series": [{"data": [[0.0, 94288.0], [100.0, 313.0], [33900.0, 3.0], [33500.0, 1.0], [33300.0, 4.0], [33100.0, 6.0], [32900.0, 2.0], [37300.0, 5.0], [37500.0, 4.0], [39100.0, 1.0], [44900.0, 5.0], [200.0, 159.0], [300.0, 113.0], [400.0, 90.0], [500.0, 75.0], [600.0, 28.0], [700.0, 63.0], [800.0, 93.0], [900.0, 97.0], [1000.0, 224.0], [1100.0, 259.0], [1200.0, 250.0], [1300.0, 256.0], [1400.0, 353.0], [1500.0, 357.0], [1600.0, 307.0], [1700.0, 298.0], [1800.0, 252.0], [1900.0, 175.0], [2000.0, 119.0], [2100.0, 109.0], [2300.0, 47.0], [2200.0, 70.0], [2400.0, 36.0], [2500.0, 42.0], [2600.0, 29.0], [2800.0, 29.0], [2700.0, 15.0], [2900.0, 43.0], [3000.0, 13.0], [3100.0, 9.0], [3300.0, 21.0], [3200.0, 16.0], [3400.0, 19.0], [3500.0, 29.0], [3600.0, 15.0], [3700.0, 12.0], [3800.0, 17.0], [3900.0, 5.0], [4000.0, 4.0], [4100.0, 3.0], [4300.0, 9.0], [4200.0, 11.0], [4600.0, 14.0], [4500.0, 18.0], [4400.0, 15.0], [4700.0, 7.0], [4800.0, 10.0], [5000.0, 9.0], [5100.0, 5.0], [4900.0, 27.0], [5200.0, 8.0], [5300.0, 5.0], [5400.0, 3.0], [6700.0, 29.0], [6900.0, 5.0], [6800.0, 1.0], [7000.0, 12.0], [7100.0, 37.0], [7200.0, 26.0], [7300.0, 27.0], [7400.0, 16.0], [7600.0, 20.0], [7500.0, 10.0], [7800.0, 22.0], [7900.0, 14.0], [7700.0, 37.0], [8100.0, 32.0], [8000.0, 10.0], [8200.0, 12.0], [8300.0, 7.0], [8400.0, 3.0], [8500.0, 4.0], [13100.0, 58.0], [13300.0, 11.0], [13200.0, 16.0], [13600.0, 36.0], [13700.0, 10.0], [13800.0, 18.0], [13400.0, 24.0], [13500.0, 20.0], [14100.0, 16.0], [14300.0, 7.0], [14200.0, 3.0], [14000.0, 15.0], [13900.0, 5.0], [14400.0, 4.0], [14800.0, 4.0], [14500.0, 5.0], [14700.0, 3.0], [14600.0, 2.0], [20400.0, 13.0], [19500.0, 47.0], [20000.0, 28.0], [20300.0, 8.0], [19800.0, 18.0], [19900.0, 28.0], [20100.0, 14.0], [20200.0, 7.0], [19700.0, 13.0], [19600.0, 14.0], [21300.0, 4.0], [21100.0, 2.0], [20800.0, 9.0], [21000.0, 10.0], [21400.0, 2.0], [21200.0, 3.0], [20500.0, 9.0], [20900.0, 11.0], [20600.0, 3.0], [20700.0, 5.0], [26000.0, 9.0], [26300.0, 10.0], [26200.0, 13.0], [26100.0, 9.0], [25900.0, 41.0], [26600.0, 8.0], [26500.0, 12.0], [26400.0, 28.0], [27400.0, 2.0], [27300.0, 7.0], [27200.0, 7.0], [27100.0, 8.0], [27500.0, 5.0], [27600.0, 2.0], [27000.0, 5.0], [26900.0, 10.0], [26700.0, 9.0], [26800.0, 12.0], [28000.0, 1.0], [28200.0, 1.0], [28400.0, 2.0], [27800.0, 1.0], [28300.0, 1.0], [27700.0, 3.0], [29100.0, 1.0], [29200.0, 1.0], [28700.0, 3.0], [30400.0, 1.0], [30600.0, 1.0], [30300.0, 5.0], [30100.0, 3.0], [32700.0, 1.0], [33400.0, 3.0], [33000.0, 4.0], [33200.0, 2.0], [32800.0, 1.0], [37800.0, 1.0], [37400.0, 1.0], [37600.0, 2.0], [39000.0, 11.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 44900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 682.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 94466.0, "series": [{"data": [[0.0, 94466.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1609.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3243.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 682.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 49.63486140724946, "minX": 1.73184666E12, "maxY": 591.309496147731, "series": [{"data": [[1.73184666E12, 49.63486140724946], [1.73184672E12, 591.309496147731]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73184672E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.6153846153846153, "minX": 1.0, "maxY": 8144.520833333333, "series": [{"data": [[2.0, 0.6153846153846153], [3.0, 2429.135135135135], [4.0, 2.909090909090909], [5.0, 1.937500000000001], [6.0, 2341.0454545454554], [7.0, 7.0], [8.0, 3.6818181818181817], [9.0, 4.103448275862068], [10.0, 7.61904761904762], [11.0, 12.96153846153846], [12.0, 7.210526315789474], [13.0, 13.774193548387096], [14.0, 592.9298245614036], [15.0, 22.999999999999996], [16.0, 10.714285714285715], [17.0, 13.687499999999998], [18.0, 308.36363636363626], [19.0, 12.129032258064518], [20.0, 22.176470588235293], [21.0, 711.9999999999999], [22.0, 24.09090909090909], [23.0, 19.363636363636367], [24.0, 1281.146341463415], [25.0, 19.857142857142858], [26.0, 27.916666666666668], [27.0, 276.66666666666663], [28.0, 22.463414634146336], [29.0, 19.466666666666672], [30.0, 516.0576923076925], [31.0, 553.7333333333333], [32.0, 2807.119047619048], [33.0, 51.0], [34.0, 16.916666666666664], [35.0, 828.34375], [36.0, 36.95238095238095], [37.0, 888.5769230769231], [39.0, 820.7083333333335], [38.0, 52.16666666666669], [40.0, 34.45454545454545], [41.0, 677.1355932203389], [42.0, 30.304347826086953], [43.0, 756.1818181818178], [44.0, 47.357142857142854], [45.0, 325.3793103448277], [46.0, 33.66666666666664], [47.0, 566.8333333333334], [48.0, 733.8378378378377], [49.0, 58.29032258064515], [50.0, 42.789473684210535], [51.0, 40.43636363636363], [52.0, 791.7307692307692], [53.0, 862.0259740259739], [54.0, 30.52631578947369], [55.0, 17.63636363636363], [57.0, 523.1521739130436], [56.0, 62.86363636363637], [58.0, 64.6142857142857], [59.0, 396.4590163934426], [60.0, 100.01754385964914], [61.0, 260.27941176470597], [62.0, 1039.1690140845071], [63.0, 35.16666666666667], [64.0, 28.181818181818187], [65.0, 28.23076923076923], [66.0, 356.7441860465117], [67.0, 62.769230769230745], [68.0, 49.62790697674419], [69.0, 49.97435897435898], [70.0, 54.175000000000004], [71.0, 27.741379310344843], [72.0, 31.30434782608696], [73.0, 739.2037037037037], [74.0, 48.83720930232557], [75.0, 481.6595744680852], [76.0, 72.54639175257735], [77.0, 1453.6250000000002], [78.0, 1183.982456140351], [79.0, 330.85483870967744], [80.0, 368.22018348623857], [81.0, 48.4047619047619], [83.0, 588.1666666666666], [82.0, 283.0389610389612], [85.0, 68.93548387096776], [84.0, 39.578124999999986], [86.0, 236.44329896907217], [87.0, 58.69892473118281], [88.0, 69.35099337748343], [89.0, 208.04210526315794], [90.0, 55.97520661157025], [91.0, 73.11249999999997], [92.0, 128.91603053435114], [93.0, 143.43396226415095], [94.0, 263.97810218978094], [95.0, 60.51538461538466], [96.0, 81.01265822784809], [97.0, 49.97916666666667], [98.0, 64.09523809523809], [99.0, 42.24444444444444], [100.0, 60.621359223300956], [101.0, 62.47222222222222], [103.0, 260.8], [102.0, 44.321428571428584], [104.0, 371.0314960629921], [105.0, 55.892857142857146], [106.0, 440.3877551020408], [107.0, 79.28947368421052], [108.0, 563.8600000000001], [109.0, 58.26666666666666], [110.0, 60.90625], [111.0, 267.0769230769231], [112.0, 880.1884057971014], [113.0, 522.0], [114.0, 929.2558139534883], [115.0, 594.7291666666667], [116.0, 890.9180327868851], [117.0, 522.2962962962963], [118.0, 85.13333333333335], [119.0, 579.3855421686746], [120.0, 244.125], [121.0, 55.17741935483869], [122.0, 50.074074074074076], [123.0, 51.016129032258064], [124.0, 59.05882352941175], [125.0, 176.531746031746], [126.0, 59.81420765027324], [127.0, 69.06470588235292], [128.0, 45.65942028985508], [131.0, 478.9044117647059], [130.0, 377.40287769784175], [129.0, 60.63736263736262], [132.0, 278.0447761194029], [133.0, 203.42187499999997], [134.0, 390.0533333333332], [135.0, 54.61016949152542], [136.0, 201.41463414634148], [137.0, 61.98969072164951], [138.0, 138.24087591240874], [139.0, 44.056338028169016], [140.0, 144.23148148148144], [141.0, 179.8823529411765], [142.0, 552.4600000000002], [143.0, 556.7499999999999], [144.0, 199.132530120482], [145.0, 252.77083333333337], [146.0, 51.4296875], [147.0, 1328.861313868613], [148.0, 322.82608695652186], [149.0, 652.5588235294118], [150.0, 200.5529411764706], [151.0, 393.0253164556962], [152.0, 48.51136363636362], [153.0, 64.1864406779661], [154.0, 1631.1923076923076], [155.0, 36.949999999999996], [156.0, 259.1165048543689], [157.0, 350.9205298013245], [158.0, 62.57971014492753], [159.0, 207.35294117647064], [160.0, 40.40217391304349], [161.0, 480.0923076923077], [162.0, 409.5392156862745], [163.0, 232.75342465753425], [164.0, 281.26506024096386], [165.0, 308.8989898989899], [166.0, 196.85714285714283], [167.0, 62.87878787878788], [168.0, 335.1162790697675], [169.0, 358.5666666666667], [174.0, 198.91666666666663], [173.0, 72.4913294797688], [172.0, 190.20588235294113], [171.0, 217.66071428571428], [170.0, 286.04597701149424], [175.0, 383.8301886792452], [176.0, 73.25396825396822], [177.0, 535.0119047619047], [178.0, 304.54347826086956], [179.0, 299.55421686746985], [183.0, 268.96], [182.0, 182.96385542168673], [181.0, 310.8586956521739], [180.0, 464.824], [184.0, 419.55223880597026], [185.0, 428.6], [186.0, 544.4600000000002], [187.0, 487.2613636363635], [188.0, 480.82524271844665], [189.0, 58.825], [190.0, 87.90322580645162], [191.0, 447.1875], [192.0, 429.08000000000004], [193.0, 457.9591836734694], [194.0, 48.36363636363637], [195.0, 428.5285714285714], [196.0, 47.36842105263157], [197.0, 350.4925373134328], [198.0, 376.58620689655174], [199.0, 45.10204081632653], [200.0, 480.2500000000001], [201.0, 47.51063829787234], [202.0, 506.4761904761904], [203.0, 49.37499999999999], [204.0, 274.1587301587301], [205.0, 187.27102803738316], [206.0, 458.26984126984127], [207.0, 492.6136363636363], [208.0, 107.93617021276589], [209.0, 73.03333333333333], [210.0, 45.687943262411366], [211.0, 93.35393258426969], [212.0, 99.50561797752805], [213.0, 92.73417721518986], [214.0, 118.18518518518522], [215.0, 450.86666666666673], [216.0, 370.2], [217.0, 364.79069767441865], [218.0, 156.8189655172414], [223.0, 324.8405797101448], [222.0, 260.07246376811594], [219.0, 71.23469387755105], [221.0, 31.53658536585366], [220.0, 33.19753086419753], [224.0, 84.90909090909088], [225.0, 46.40789473684212], [226.0, 33.85245901639344], [227.0, 37.35849056603774], [228.0, 60.898305084745765], [229.0, 84.68333333333334], [230.0, 39.964912280701746], [231.0, 67.52054794520551], [232.0, 58.724489795918366], [233.0, 63.03947368421052], [234.0, 68.85294117647058], [235.0, 121.92105263157892], [236.0, 79.82978723404256], [237.0, 43.938461538461524], [238.0, 89.69014084507042], [239.0, 60.69230769230768], [240.0, 102.39325842696624], [241.0, 114.43749999999999], [242.0, 35.940298507462686], [243.0, 83.12765957446804], [244.0, 359.18], [245.0, 401.01851851851853], [246.0, 452.5833333333333], [247.0, 332.9701492537314], [248.0, 38.6111111111111], [249.0, 61.124999999999986], [250.0, 44.2769230769231], [251.0, 69.50980392156862], [252.0, 295.53571428571433], [253.0, 49.63793103448276], [254.0, 44.61904761904762], [255.0, 67.12121212121212], [257.0, 46.813559322033896], [256.0, 88.22058823529413], [258.0, 46.98684210526314], [259.0, 73.09999999999997], [260.0, 70.910447761194], [261.0, 38.14942528735632], [262.0, 63.0857142857143], [263.0, 93.7222222222222], [264.0, 88.16483516483518], [271.0, 223.9230769230771], [270.0, 84.98666666666665], [269.0, 356.0975609756097], [268.0, 313.70422535211276], [265.0, 67.78082191780818], [266.0, 278.0204081632653], [267.0, 255.67156862745094], [273.0, 59.86419753086417], [272.0, 165.04326923076925], [274.0, 138.5902777777778], [275.0, 140.6065573770491], [276.0, 46.81666666666666], [277.0, 200.18226600985224], [278.0, 139.25984251968518], [279.0, 244.11224489795907], [280.0, 201.0870967741937], [286.0, 177.34126984126982], [287.0, 46.648148148148145], [284.0, 297.5243902439024], [285.0, 284.3037974683544], [281.0, 83.87301587301589], [282.0, 41.16363636363636], [283.0, 5862.583333333333], [289.0, 185.359649122807], [288.0, 189.27522935779814], [290.0, 218.40310077519382], [291.0, 194.51260504201682], [292.0, 291.6470588235294], [293.0, 339.65048543689323], [294.0, 258.94736842105266], [295.0, 396.94067796610165], [300.0, 446.4672131147542], [301.0, 54.868852459016395], [302.0, 64.8050847457627], [303.0, 50.338983050847446], [297.0, 95.81538461538462], [296.0, 221.63095238095238], [299.0, 381.77477477477476], [298.0, 533.6024096385543], [305.0, 41.675000000000004], [304.0, 80.35555555555553], [306.0, 58.31147540983608], [307.0, 72.27941176470587], [308.0, 30.945205479452063], [309.0, 185.8807339449541], [310.0, 54.82653061224491], [311.0, 58.30188679245281], [312.0, 61.16883116883116], [318.0, 29.927536231884062], [319.0, 69.40677966101693], [317.0, 140.60869565217388], [316.0, 482.4933333333333], [313.0, 40.166666666666664], [314.0, 187.94897959183675], [315.0, 55.3896103896104], [321.0, 77.87037037037035], [320.0, 66.14864864864862], [322.0, 317.73809523809524], [323.0, 169.68468468468467], [324.0, 211.8726114649681], [325.0, 161.7619047619048], [326.0, 192.69736842105266], [327.0, 602.5083333333331], [328.0, 348.83798882681555], [334.0, 92.86224489795917], [335.0, 256.2761194029852], [332.0, 238.33870967741936], [333.0, 79.00757575757575], [329.0, 77.43502824858754], [330.0, 386.35195530726264], [331.0, 185.23255813953486], [337.0, 194.05607476635518], [336.0, 219.27522935779825], [338.0, 71.69863013698632], [339.0, 374.8593749999999], [340.0, 579.4736842105262], [341.0, 35.208955223880615], [342.0, 66.57303370786518], [343.0, 132.61194029850745], [344.0, 77.03846153846155], [350.0, 40.403846153846146], [351.0, 139.0], [348.0, 44.210526315789465], [349.0, 141.3404255319149], [345.0, 333.3529411764706], [346.0, 24.333333333333336], [347.0, 240.16666666666666], [352.0, 31.30952380952381], [353.0, 68.01492537313435], [357.0, 669.740740740741], [356.0, 663.3559322033899], [358.0, 121.66666666666664], [355.0, 257.9791666666667], [364.0, 45.12499999999999], [365.0, 140.36363636363635], [366.0, 2411.9532710280378], [367.0, 34.61538461538461], [354.0, 142.32142857142864], [359.0, 36.90322580645161], [360.0, 105.3225806451613], [361.0, 47.29032258064516], [362.0, 136.43859649122805], [363.0, 50.94339622641507], [368.0, 186.40000000000003], [372.0, 188.09302325581405], [371.0, 621.4385964912283], [380.0, 86.64912280701755], [381.0, 157.9178082191781], [382.0, 91.3978494623656], [383.0, 72.96825396825395], [370.0, 124.29824561403501], [369.0, 128.95833333333334], [373.0, 102.82926829268295], [374.0, 30.068965517241388], [375.0, 948.2439024390243], [376.0, 666.1578947368422], [377.0, 202.21875], [378.0, 39.92857142857142], [379.0, 42.555555555555564], [385.0, 66.29761904761905], [384.0, 85.67676767676767], [386.0, 46.14084507042253], [387.0, 45.32835820895521], [388.0, 126.96153846153845], [389.0, 268.4594594594595], [390.0, 36.09803921568627], [391.0, 299.3846153846154], [392.0, 67.08474576271188], [399.0, 265.4324324324325], [398.0, 368.4776119402986], [396.0, 223.17272727272723], [397.0, 238.251748251748], [393.0, 86.14999999999998], [394.0, 191.83916083916083], [395.0, 148.7327586206896], [401.0, 120.4941176470588], [400.0, 274.05164319248837], [402.0, 144.70857142857153], [403.0, 153.8615384615385], [404.0, 47.58878504672898], [405.0, 188.11356466876975], [406.0, 4237.816831683169], [407.0, 239.59829059829056], [408.0, 243.59154929577466], [414.0, 202.03676470588232], [415.0, 667.8942307692306], [412.0, 87.16666666666667], [413.0, 266.5879120879122], [409.0, 41.52980132450331], [410.0, 206.84955752212377], [411.0, 124.15189873417721], [417.0, 336.31249999999994], [416.0, 370.964705882353], [418.0, 87.21794871794873], [419.0, 126.4507042253521], [420.0, 372.8], [421.0, 352.7230769230769], [422.0, 168.35999999999999], [423.0, 287.8461538461538], [424.0, 255.0704225352113], [430.0, 57.72549019607844], [431.0, 404.38571428571436], [428.0, 457.6867469879518], [429.0, 444.6984126984127], [425.0, 30.558823529411764], [426.0, 533.4230769230769], [427.0, 211.2876712328767], [433.0, 483.57432432432444], [432.0, 54.45945945945946], [434.0, 79.86713286713288], [435.0, 105.24651162790703], [436.0, 258.99393939393934], [437.0, 328.27559055118115], [438.0, 153.422077922078], [439.0, 276.03921568627464], [440.0, 166.47586206896554], [446.0, 436.14814814814804], [447.0, 590.8571428571428], [444.0, 541.4166666666669], [445.0, 437.8076923076923], [441.0, 127.69696969696975], [442.0, 114.91025641025642], [443.0, 703.7638888888887], [449.0, 375.2456140350878], [450.0, 215.35999999999996], [448.0, 341.0476190476191], [451.0, 80.80000000000001], [452.0, 147.4262295081967], [453.0, 302.44871794871796], [454.0, 370.4625], [455.0, 98.57142857142858], [456.0, 464.98936170212767], [462.0, 191.15999999999997], [463.0, 53.20689655172414], [460.0, 216.84810126582283], [461.0, 180.49999999999994], [457.0, 92.1578947368421], [458.0, 670.4520547945203], [459.0, 88.11904761904762], [465.0, 51.97222222222222], [464.0, 117.22222222222221], [466.0, 110.12328767123287], [467.0, 40.389830508474574], [468.0, 43.82051282051283], [469.0, 44.565217391304344], [470.0, 80.85454545454544], [471.0, 121.8666666666667], [472.0, 75.3225806451613], [478.0, 496.85454545454553], [479.0, 415.2361111111111], [476.0, 35.01923076923079], [477.0, 400.24074074074065], [473.0, 36.1875], [474.0, 76.34328358208954], [475.0, 123.5625], [481.0, 35.17857142857143], [480.0, 296.48333333333323], [482.0, 67.36842105263159], [483.0, 39.934426229508205], [484.0, 94.72222222222221], [489.0, 160.20000000000002], [490.0, 528.642857142857], [491.0, 60.5084745762712], [488.0, 89.70312500000001], [494.0, 65.27173913043477], [495.0, 67.63440860215054], [492.0, 64.8214285714286], [493.0, 60.75], [487.0, 35.86538461538461], [486.0, 36.64705882352943], [485.0, 93.57627118644065], [497.0, 63.36633663366337], [496.0, 108.36633663366338], [498.0, 153.69298245614036], [499.0, 121.14953271028038], [500.0, 239.418918918919], [501.0, 108.89599999999997], [502.0, 65.7391304347826], [503.0, 38.28000000000002], [504.0, 58.29292929292926], [510.0, 304.52419354838696], [511.0, 211.12878787878773], [508.0, 86.3362068965517], [509.0, 410.81355932203417], [505.0, 81.48780487804878], [506.0, 134.69696969696966], [507.0, 59.288135593220346], [515.0, 154.49152542372877], [512.0, 74.36036036036036], [526.0, 210.468085106383], [527.0, 86.44067796610167], [524.0, 115.01086956521738], [525.0, 27.33962264150944], [522.0, 72.35576923076921], [523.0, 65.82022471910113], [513.0, 357.9236641221375], [514.0, 152.01775147929004], [516.0, 256.84375], [517.0, 339.0277777777777], [518.0, 222.78832116788325], [519.0, 208.24019607843138], [528.0, 79.12195121951216], [542.0, 130.13207547169807], [543.0, 81.95652173913044], [540.0, 39.550000000000004], [541.0, 37.65384615384616], [538.0, 63.4107142857143], [539.0, 36.199999999999996], [537.0, 374.27906976744197], [536.0, 400.598870056497], [529.0, 36.66101694915254], [530.0, 69.14999999999999], [531.0, 62.40350877192982], [532.0, 156.70491803278688], [533.0, 68.82978723404257], [535.0, 708.3076923076924], [534.0, 31.852941176470587], [520.0, 100.1897810218978], [521.0, 115.8923076923077], [547.0, 159.22433460076041], [544.0, 423.7356321839081], [558.0, 200.70491803278705], [559.0, 38.72340425531915], [556.0, 178.20714285714283], [557.0, 174.6268656716418], [554.0, 178.81756756756766], [555.0, 138.44094488188978], [545.0, 464.2520325203252], [546.0, 622.3203883495145], [548.0, 243.86931818181822], [549.0, 70.90344827586215], [550.0, 270.7405857740584], [551.0, 142.50819672131138], [560.0, 130.97902097902093], [575.0, 307.43478260869557], [573.0, 86.51515151515149], [574.0, 80.73015873015872], [571.0, 302.45544554455444], [572.0, 249.3030303030303], [570.0, 433.04999999999995], [569.0, 177.75000000000003], [568.0, 419.53398058252424], [561.0, 200.63125000000005], [562.0, 8016.555555555559], [563.0, 125.45882352941175], [564.0, 446.7307692307692], [565.0, 262.6811594202898], [567.0, 78.89473684210525], [566.0, 501.19999999999993], [552.0, 31.34146341463414], [553.0, 179.1590909090909], [579.0, 375.3220338983051], [576.0, 45.04838709677421], [590.0, 224.17948717948718], [591.0, 334.7826086956522], [588.0, 155.4411764705882], [589.0, 136.53448275862073], [586.0, 115.34920634920633], [587.0, 160.0181818181818], [577.0, 311.18095238095236], [578.0, 104.26923076923077], [580.0, 471.73394495412845], [581.0, 29.337209302325586], [582.0, 520.0454545454546], [583.0, 391.45299145299134], [596.0, 256.385093167702], [597.0, 105.24242424242425], [598.0, 191.14070351758798], [599.0, 455.47999999999996], [595.0, 414.6666666666665], [594.0, 137.36170212765958], [593.0, 223.06410256410254], [592.0, 235.67567567567565], [606.0, 53.16239316239317], [607.0, 205.52727272727273], [604.0, 51.66666666666666], [605.0, 168.28089887640454], [602.0, 117.66326530612244], [603.0, 105.88549618320614], [600.0, 656.4656488549623], [601.0, 411.8482142857145], [584.0, 478.55555555555566], [585.0, 326.32876712328766], [611.0, 60.17948717948718], [609.0, 68.03508771929823], [608.0, 37.333333333333336], [622.0, 39.10843373493976], [623.0, 55.84931506849317], [620.0, 95.15853658536584], [621.0, 85.83333333333337], [618.0, 192.02343750000003], [619.0, 40.88181818181819], [610.0, 98.2676056338028], [612.0, 219.14678899082568], [613.0, 87.23255813953485], [617.0, 593.638888888889], [616.0, 713.3410852713178], [615.0, 206.56692913385825], [632.0, 63.06976744186046], [633.0, 69.69767441860466], [634.0, 33.43137254901959], [635.0, 90.68421052631578], [636.0, 33.46341463414634], [637.0, 35.24242424242424], [638.0, 61.958904109589035], [639.0, 127.51020408163268], [624.0, 195.18032786885246], [625.0, 39.06818181818183], [626.0, 76.52631578947368], [627.0, 41.628571428571426], [628.0, 39.44736842105263], [629.0, 82.60000000000001], [630.0, 63.96296296296296], [631.0, 31.94827586206898], [614.0, 25.413333333333338], [647.0, 91.80152671755725], [641.0, 692.1022727272729], [640.0, 379.91836734693885], [654.0, 35.37142857142858], [655.0, 59.36538461538459], [652.0, 61.982758620689665], [653.0, 34.16216216216216], [650.0, 69.12318840579707], [651.0, 141.53773584905656], [646.0, 103.06299212598432], [645.0, 46.252336448598136], [644.0, 77.09459459459458], [643.0, 210.743119266055], [642.0, 707.0370370370371], [656.0, 74.53658536585365], [670.0, 30.04444444444444], [671.0, 91.24074074074078], [668.0, 265.25688073394497], [669.0, 109.83653846153848], [666.0, 295.9791666666667], [667.0, 630.84375], [664.0, 415.8691099476439], [665.0, 234.57594936708867], [657.0, 36.277777777777764], [662.0, 146.29142857142855], [663.0, 71.76683937823834], [661.0, 225.93452380952382], [660.0, 101.13636363636363], [659.0, 36.53061224489796], [658.0, 79.65217391304347], [648.0, 181.4206896551724], [649.0, 67.86060606060602], [675.0, 38.71428571428571], [672.0, 88.92592592592595], [686.0, 39.51111111111111], [687.0, 85.63888888888889], [684.0, 64.75675675675674], [685.0, 556.0576923076923], [682.0, 71.42307692307692], [683.0, 38.545454545454554], [673.0, 70.82142857142857], [674.0, 40.371428571428574], [676.0, 39.28125], [677.0, 121.35714285714282], [678.0, 42.940000000000005], [679.0, 67.55555555555556], [688.0, 40.91666666666668], [702.0, 69.85555555555557], [703.0, 328.88775510204084], [700.0, 89.25423728813563], [701.0, 38.48214285714286], [699.0, 838.6351351351352], [698.0, 52.72058823529412], [697.0, 33.41428571428571], [696.0, 375.2105263157895], [689.0, 84.5568181818182], [690.0, 75.40845070422532], [691.0, 77.59420289855069], [692.0, 158.041095890411], [693.0, 301.46666666666664], [694.0, 656.2542372881356], [695.0, 322.2857142857143], [680.0, 41.70588235294117], [681.0, 44.11764705882352], [707.0, 156.6061538461538], [704.0, 237.38764044943815], [719.0, 222.6844660194174], [718.0, 208.8834080717488], [716.0, 418.99999999999994], [717.0, 140.8487654320987], [714.0, 60.22321428571424], [715.0, 153.1072463768116], [705.0, 87.15714285714284], [706.0, 72.93137254901961], [708.0, 263.0507614213199], [709.0, 38.39534883720931], [710.0, 70.0503144654088], [711.0, 226.47191011235952], [721.0, 517.6288659793814], [720.0, 68.92434210526314], [734.0, 465.4567901234568], [735.0, 226.00000000000003], [732.0, 334.8653846153847], [733.0, 38.88888888888888], [730.0, 562.6099999999999], [731.0, 339.04040404040404], [728.0, 438.52336448598135], [729.0, 188.8571428571429], [722.0, 8144.520833333333], [723.0, 434.0234375000002], [724.0, 98.68316831683168], [725.0, 71.32653061224492], [726.0, 227.39344262295086], [727.0, 278.2022471910112], [712.0, 239.31012658227849], [713.0, 248.09467455621322], [739.0, 101.29850746268657], [736.0, 113.7087378640777], [750.0, 52.490196078431346], [751.0, 40.138888888888886], [748.0, 113.35454545454544], [749.0, 64.33333333333333], [746.0, 267.3105590062112], [747.0, 244.5178571428571], [737.0, 54.416666666666664], [738.0, 300.98], [740.0, 199.08530805687207], [741.0, 236.18674698795178], [742.0, 163.12587412587422], [743.0, 362.177966101695], [752.0, 100.2372881355932], [766.0, 62.746268656716424], [767.0, 225.72081218274107], [764.0, 179.1574074074074], [765.0, 36.94285714285715], [762.0, 82.7837837837838], [763.0, 322.34782608695656], [760.0, 108.13793103448275], [761.0, 92.27586206896554], [753.0, 70.52857142857142], [754.0, 34.88679245283017], [755.0, 33.224999999999994], [756.0, 78.82258064516131], [757.0, 35.55882352941177], [758.0, 36.72727272727273], [759.0, 36.51351351351351], [744.0, 550.5670103092784], [745.0, 512.8434782608696], [770.0, 266.43999999999994], [772.0, 275.8806818181817], [768.0, 236.68939393939394], [773.0, 615.892156862745], [771.0, 286.71186440677974], [769.0, 310.61867704280155], [774.0, 182.14634146341461], [775.0, 158.42948717948715], [792.0, 62.333333333333364], [793.0, 60.807017543859665], [794.0, 29.876712328767134], [795.0, 221.8018867924529], [796.0, 56.534883720930225], [797.0, 265.6138613861387], [798.0, 102.88785046728977], [799.0, 23.978947368421057], [784.0, 33.86666666666666], [786.0, 37.19230769230769], [785.0, 75.48387096774194], [787.0, 76.5151515151515], [788.0, 2617.7959183673465], [789.0, 33.30434782608695], [790.0, 34.166666666666686], [791.0, 75.69620253164557], [776.0, 158.60240963855424], [777.0, 44.068965517241395], [778.0, 88.94708994708989], [779.0, 35.831775700934564], [780.0, 104.34579439252335], [781.0, 36.27777777777778], [782.0, 119.71962616822425], [783.0, 34.421052631578945], [802.0, 546.5371900826447], [803.0, 260.5806451612904], [801.0, 432.6249999999999], [800.0, 213.8686868686868], [804.0, 271.2499999999998], [805.0, 100.98214285714285], [806.0, 64.90109890109888], [807.0, 265.95744680851067], [825.0, 108.47115384615381], [826.0, 61.57264957264959], [827.0, 316.8363636363636], [828.0, 83.34545454545456], [829.0, 88.81176470588234], [830.0, 35.677419354838705], [831.0, 406.35555555555555], [824.0, 469.4], [816.0, 210.29032258064512], [817.0, 131.38524590163934], [818.0, 182.64705882352942], [819.0, 116.81318681318682], [820.0, 359.07843137254895], [823.0, 390.76470588235287], [822.0, 277.22784810126586], [821.0, 422.49056603773585], [808.0, 37.884615384615394], [809.0, 53.95652173913044], [810.0, 65.0869565217392], [811.0, 353.5979381443299], [812.0, 34.5125], [813.0, 89.92771084337346], [814.0, 64.05714285714285], [815.0, 96.45783132530119], [839.0, 73.82417582417585], [835.0, 42.707692307692305], [832.0, 95.33333333333331], [846.0, 37.19642857142856], [847.0, 123.64285714285708], [844.0, 97.64062499999999], [845.0, 32.12765957446808], [833.0, 93.61538461538461], [834.0, 41.301587301587304], [836.0, 184.41237113402062], [837.0, 47.482758620689644], [838.0, 30.513888888888893], [848.0, 62.9090909090909], [862.0, 32.913043478260875], [863.0, 138.3430656934307], [860.0, 160.89062499999991], [861.0, 33.85106382978724], [858.0, 101.41984732824424], [859.0, 202.46116504854365], [856.0, 92.34246575342465], [857.0, 212.60730593607303], [849.0, 132.07608695652175], [850.0, 498.80555555555554], [851.0, 701.2162162162163], [852.0, 353.4090909090909], [853.0, 230.8103448275862], [854.0, 146.87199999999996], [855.0, 108.23913043478257], [843.0, 1142.829268292683], [842.0, 168.51282051282053], [841.0, 52.48387096774193], [840.0, 49.821428571428584], [867.0, 60.114285714285714], [864.0, 3261.8375000000005], [879.0, 129.38271604938274], [877.0, 123.01754385964914], [878.0, 59.58653846153847], [865.0, 497.17105263157896], [866.0, 62.93421052631578], [868.0, 169.5744680851064], [869.0, 175.20289855072465], [870.0, 81.3913043478261], [871.0, 316.25423728813576], [880.0, 638.9477611940299], [892.0, 29.361111111111118], [894.0, 28.20689655172414], [893.0, 28.405405405405403], [895.0, 199.27777777777777], [890.0, 34.454545454545446], [891.0, 176.25000000000003], [888.0, 171.65248226950348], [889.0, 35.464285714285715], [881.0, 478.69531249999994], [882.0, 318.47413793103453], [883.0, 91.4330708661417], [884.0, 41.983870967741936], [885.0, 26.523809523809522], [886.0, 232.89887640449436], [887.0, 220.4435483870968], [876.0, 424.0833333333334], [875.0, 104.15702479338847], [874.0, 179.21232876712315], [873.0, 1022.722222222222], [872.0, 179.76767676767687], [899.0, 212.18497109826586], [897.0, 146.56969696969693], [896.0, 607.9532710280375], [910.0, 264.3269230769231], [911.0, 98.3768115942029], [908.0, 237.21153846153857], [909.0, 480.95744680851055], [906.0, 140.95454545454544], [907.0, 504.9456521739131], [898.0, 552.7463768115941], [900.0, 351.68131868131866], [901.0, 207.52747252747255], [902.0, 118.36363636363635], [903.0, 206.02586206896544], [912.0, 226.65625000000006], [926.0, 84.05925925925926], [927.0, 56.97315436241608], [924.0, 492.25833333333327], [925.0, 65.3235294117647], [922.0, 33.717391304347814], [923.0, 155.74603174603172], [920.0, 58.30952380952379], [921.0, 60.642857142857146], [913.0, 100.16666666666666], [914.0, 33.474358974358964], [915.0, 76.23684210526316], [916.0, 68.0], [917.0, 34.916666666666664], [918.0, 33.973684210526315], [919.0, 334.125], [904.0, 115.28378378378378], [905.0, 181.36999999999995], [933.0, 102.73076923076923], [929.0, 249.54385964912282], [928.0, 161.7142857142857], [942.0, 352.2807017543859], [943.0, 51.851851851851876], [940.0, 37.029999999999994], [941.0, 49.60824742268043], [930.0, 269.69369369369366], [931.0, 1049.3761467889906], [932.0, 848.8552631578948], [934.0, 47.623376623376615], [935.0, 120.24390243902441], [944.0, 96.56310679611654], [958.0, 25.743589743589745], [959.0, 70.02083333333334], [956.0, 30.78378378378378], [957.0, 1030.5517241379312], [954.0, 523.4067796610169], [955.0, 31.15217391304348], [952.0, 185.34482758620683], [953.0, 34.955555555555556], [945.0, 498.88235294117663], [946.0, 46.03508771929825], [947.0, 37.15463917525772], [948.0, 126.20588235294119], [949.0, 29.342105263157894], [950.0, 430.81132075471703], [951.0, 32.36708860759492], [939.0, 418.30769230769226], [938.0, 195.47777777777776], [937.0, 45.21538461538461], [936.0, 44.23863636363637], [963.0, 104.40800000000007], [960.0, 51.8888888888889], [975.0, 973.9012345679013], [974.0, 328.5663716814161], [972.0, 633.9551282051285], [973.0, 440.10280373831773], [970.0, 495.8589743589744], [971.0, 468.28467153284674], [961.0, 94.468085106383], [962.0, 978.4464285714283], [964.0, 577.8], [965.0, 533.40350877193], [966.0, 240.2788461538462], [967.0, 74.5820895522388], [976.0, 46.05932203389832], [990.0, 85.93333333333334], [991.0, 177.09420289855058], [988.0, 40.7282608695652], [989.0, 41.78947368421053], [986.0, 63.80487804878047], [987.0, 38.16161616161617], [984.0, 59.49999999999999], [985.0, 123.7964912280701], [977.0, 281.3302752293578], [978.0, 215.45454545454538], [979.0, 125.50802139037444], [980.0, 60.54081632653057], [981.0, 770.1376146788991], [982.0, 573.1338028169014], [983.0, 193.36796536796533], [968.0, 444.35833333333335], [969.0, 58.348214285714306], [995.0, 2545.949579831933], [992.0, 150.95575221238946], [1006.0, 35.36923076923075], [1007.0, 84.8857142857143], [1004.0, 263.5483870967743], [1005.0, 76.23255813953487], [1002.0, 1003.5263157894733], [1003.0, 64.98823529411764], [993.0, 71.80487804878047], [994.0, 169.41904761904763], [996.0, 728.2258064516128], [997.0, 489.8823529411764], [998.0, 271.84615384615387], [999.0, 1008.7808219178082], [1008.0, 37.542857142857144], [1020.0, 974.4137931034487], [1022.0, 34.28260869565217], [1021.0, 35.416666666666664], [1023.0, 67.97499999999998], [1018.0, 36.19565217391305], [1019.0, 67.31818181818181], [1016.0, 82.18840579710147], [1017.0, 55.4776119402985], [1009.0, 36.91176470588236], [1010.0, 78.27777777777779], [1011.0, 73.9787234042553], [1012.0, 36.786885245901644], [1014.0, 38.2], [1015.0, 346.0298507462686], [1013.0, 142.84482758620692], [1000.0, 916.8181818181818], [1001.0, 1764.9333333333334], [1030.0, 84.38053097345134], [1024.0, 498.58333333333326], [1054.0, 37.993589743589745], [1052.0, 204.2365591397849], [1048.0, 272.84545454545446], [1050.0, 31.921875], [1044.0, 70.57894736842105], [1046.0, 122.90666666666667], [1026.0, 73.0819672131148], [1028.0, 372.7096774193549], [1032.0, 267.76000000000005], [1034.0, 392.3333333333335], [1036.0, 312.5964912280703], [1038.0, 1403.9444444444446], [1056.0, 734.4785714285717], [1084.0, 62.69387755102043], [1086.0, 116.26829268292683], [1080.0, 79.75949367088606], [1082.0, 695.4999999999995], [1076.0, 54.17241379310344], [1078.0, 58.96428571428571], [1072.0, 251.8150289017342], [1074.0, 897.0422535211268], [1058.0, 99.71739130434791], [1060.0, 75.04225352112675], [1062.0, 232.70114942528727], [1064.0, 52.87999999999999], [1066.0, 282.3925233644858], [1070.0, 292.78947368421063], [1068.0, 587.4125000000003], [1040.0, 754.9795918367346], [1042.0, 1003.607594936709], [1092.0, 137.18749999999991], [1088.0, 94.28688524590164], [1094.0, 185.00000000000006], [1090.0, 35.604651162790695], [1096.0, 77.17424242424238], [1098.0, 60.15189873417721], [1100.0, 61.073529411764724], [1102.0, 89.50000000000001], [1120.0, 905.2068965517242], [1122.0, 43.00000000000001], [1124.0, 89.21276595744682], [1126.0, 125.75000000000001], [1128.0, 43.76923076923077], [1130.0, 44.638888888888886], [1104.0, 40.23684210526315], [1106.0, 286.91176470588243], [1108.0, 61.9622641509434], [1110.0, 101.22222222222223], [1114.0, 1505.7500000000005], [1112.0, 54.0], [1118.0, 29.764705882352946], [1116.0, 115.42857142857143], [1031.0, 99.2360248447205], [1025.0, 58.70886075949367], [1051.0, 572.6666666666665], [1053.0, 117.95121951219517], [1055.0, 2157.633333333333], [1047.0, 64.94444444444447], [1049.0, 473.15068493150676], [1027.0, 86.2125], [1029.0, 57.34020618556702], [1033.0, 79.18918918918918], [1035.0, 34.95522388059702], [1037.0, 1454.8676470588236], [1039.0, 1260.0638297872338], [1057.0, 459.5207100591716], [1085.0, 53.119047619047635], [1087.0, 414.5242718446602], [1081.0, 326.44], [1083.0, 42.125], [1077.0, 230.82142857142858], [1079.0, 65.03658536585365], [1073.0, 660.4420289855074], [1075.0, 1552.3114754098358], [1059.0, 97.89017341040459], [1061.0, 45.57377049180328], [1063.0, 56.229629629629606], [1065.0, 79.23750000000003], [1067.0, 190.0000000000001], [1071.0, 1419.2019230769235], [1069.0, 53.1224489795918], [1043.0, 59.234375], [1041.0, 1067.5681818181818], [1045.0, 63.57608695652174], [1093.0, 604.0153846153846], [1089.0, 89.14285714285714], [1095.0, 94.83018867924527], [1091.0, 59.02985074626866], [1097.0, 485.93617021276583], [1099.0, 76.94999999999999], [1101.0, 56.299145299145295], [1103.0, 707.7209302325581], [1121.0, 27.58823529411765], [1123.0, 47.75], [1125.0, 44.16129032258064], [1127.0, 43.903225806451616], [1129.0, 138.52380952380952], [1131.0, 45.4], [1105.0, 68.92592592592595], [1107.0, 35.512195121951216], [1109.0, 34.40625], [1111.0, 37.16666666666667], [1113.0, 53.86046511627907], [1115.0, 841.8857142857145], [1119.0, 117.62857142857143], [1117.0, 29.77777777777778], [1.0, 2246.399999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[581.1477000000036, 289.0340199999985]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1131.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6318.983333333334, "minX": 1.73184666E12, "maxY": 630083.1333333333, "series": [{"data": [[1.73184666E12, 11101.15], [1.73184672E12, 630083.1333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73184666E12, 6318.983333333334], [1.73184672E12, 330032.38333333336]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73184672E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 50.644989339019205, "minX": 1.73184666E12, "maxY": 293.59170029758405, "series": [{"data": [[1.73184666E12, 50.644989339019205], [1.73184672E12, 293.59170029758405]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73184672E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 50.632729211087444, "minX": 1.73184666E12, "maxY": 282.6090558884657, "series": [{"data": [[1.73184666E12, 50.632729211087444], [1.73184672E12, 282.6090558884657]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73184672E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.05223880597014924, "minX": 1.73184666E12, "maxY": 205.4272756919812, "series": [{"data": [[1.73184666E12, 0.05223880597014924], [1.73184672E12, 205.4272756919812]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73184672E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73184666E12, "maxY": 44914.0, "series": [{"data": [[1.73184666E12, 516.0], [1.73184672E12, 44914.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73184666E12, 1.0], [1.73184672E12, 0.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73184666E12, 76.0], [1.73184672E12, 36.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73184666E12, 331.9200000000001], [1.73184672E12, 25960.93000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73184666E12, 43.0], [1.73184672E12, 21.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.73184666E12, 102.0], [1.73184672E12, 71.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73184672E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1.0, "minX": 60.0, "maxY": 1303.5, "series": [{"data": [[566.0, 6.0], [777.0, 38.0], [873.0, 54.0], [980.0, 50.0], [964.0, 47.0], [1200.0, 56.0], [1332.0, 48.0], [1331.0, 33.0], [1386.0, 45.0], [1498.0, 42.0], [1482.0, 42.0], [1504.0, 34.0], [1572.0, 46.0], [1553.0, 36.0], [1586.0, 40.0], [1601.0, 42.0], [1753.0, 50.0], [1783.0, 45.0], [1738.0, 35.0], [1766.0, 36.0], [1845.0, 35.0], [1849.0, 32.0], [1813.0, 38.0], [1919.0, 36.0], [1863.0, 25.0], [1918.0, 37.0], [1865.0, 34.0], [1899.0, 35.0], [1913.0, 30.0], [1910.0, 30.0], [1975.0, 38.0], [1957.0, 33.0], [1970.0, 35.0], [1930.0, 33.0], [1932.0, 29.0], [1947.0, 32.0], [1946.0, 29.0], [1941.0, 34.0], [2015.0, 33.0], [1997.0, 44.0], [2035.0, 32.0], [2001.0, 36.0], [1987.0, 34.0], [2092.0, 29.0], [2091.0, 37.0], [2110.0, 7.0], [2294.0, 32.0], [2414.0, 24.0], [2385.0, 21.0], [2657.0, 23.0], [2640.0, 22.0], [2715.0, 19.0], [3093.0, 31.0], [3122.0, 23.0], [60.0, 1.0], [226.0, 11.0], [429.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1331.0, 252.5], [1482.0, 151.0], [1504.0, 300.5], [1572.0, 103.0], [1553.0, 102.0], [1586.0, 1303.5], [1601.0, 301.0], [1753.0, 102.0], [1783.0, 102.0], [1738.0, 202.0], [1766.0, 402.5], [1845.0, 303.0], [1849.0, 200.0], [1813.0, 201.0], [1919.0, 201.0], [1863.0, 302.5], [1918.0, 202.5], [1865.0, 301.0], [1899.0, 201.0], [1913.0, 303.0], [1910.0, 402.0], [1975.0, 251.0], [1957.0, 200.0], [1970.0, 202.5], [1930.0, 202.0], [1932.0, 413.0], [1947.0, 302.0], [1946.0, 461.0], [1941.0, 301.0], [2015.0, 202.0], [1997.0, 317.0], [2035.0, 202.0], [2001.0, 202.0], [1987.0, 302.0], [2092.0, 202.0], [2091.0, 302.0], [2110.0, 7.0], [2294.0, 202.5], [2414.0, 320.0], [2385.0, 9.0], [2657.0, 706.0], [2640.0, 11.0], [2715.0, 6.0], [3093.0, 7.0], [3122.0, 6.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3122.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 60.0, "maxY": 56.0, "series": [{"data": [[566.0, 6.0], [777.0, 38.0], [873.0, 54.0], [980.0, 50.0], [964.0, 47.0], [1200.0, 56.0], [1332.0, 48.0], [1331.0, 33.0], [1386.0, 45.0], [1498.0, 42.0], [1482.0, 42.0], [1504.0, 34.0], [1572.0, 46.0], [1553.0, 36.0], [1586.0, 40.0], [1601.0, 42.0], [1753.0, 50.0], [1783.0, 45.0], [1738.0, 35.0], [1766.0, 36.0], [1845.0, 35.0], [1849.0, 32.0], [1813.0, 38.0], [1919.0, 36.0], [1863.0, 25.0], [1918.0, 37.0], [1865.0, 34.0], [1899.0, 35.0], [1913.0, 30.0], [1910.0, 30.0], [1975.0, 38.0], [1957.0, 33.0], [1970.0, 35.0], [1930.0, 33.0], [1932.0, 29.0], [1947.0, 32.0], [1946.0, 29.0], [1941.0, 34.0], [2015.0, 33.0], [1997.0, 44.0], [2035.0, 32.0], [2001.0, 36.0], [1987.0, 34.0], [2092.0, 29.0], [2091.0, 37.0], [2110.0, 7.0], [2294.0, 32.0], [2414.0, 24.0], [2385.0, 21.0], [2657.0, 23.0], [2640.0, 22.0], [2715.0, 19.0], [3093.0, 31.0], [3122.0, 23.0], [60.0, 1.0], [226.0, 11.0], [429.0, 1.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1331.0, 0.0], [1482.0, 0.0], [1504.0, 0.0], [1572.0, 0.0], [1553.0, 0.0], [1586.0, 0.0], [1601.0, 0.0], [1753.0, 0.0], [1783.0, 0.0], [1738.0, 0.0], [1766.0, 0.0], [1845.0, 0.0], [1849.0, 0.0], [1813.0, 0.0], [1919.0, 0.0], [1863.0, 0.0], [1918.0, 0.0], [1865.0, 0.0], [1899.0, 0.0], [1913.0, 0.0], [1910.0, 0.0], [1975.0, 0.0], [1957.0, 0.0], [1970.0, 0.0], [1930.0, 0.0], [1932.0, 0.0], [1947.0, 0.0], [1946.0, 0.0], [1941.0, 0.0], [2015.0, 0.0], [1997.0, 0.0], [2035.0, 0.0], [2001.0, 0.0], [1987.0, 0.0], [2092.0, 0.0], [2091.0, 0.0], [2110.0, 7.0], [2294.0, 0.0], [2414.0, 0.0], [2385.0, 9.0], [2657.0, 0.0], [2640.0, 11.0], [2715.0, 6.0], [3093.0, 7.0], [3122.0, 6.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 3122.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 32.7, "minX": 1.73184666E12, "maxY": 1633.9666666666667, "series": [{"data": [[1.73184666E12, 32.7], [1.73184672E12, 1633.9666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73184672E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.73184666E12, "maxY": 1624.0333333333333, "series": [{"data": [[1.73184666E12, 31.266666666666666], [1.73184672E12, 1624.0333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.73184672E12, 0.48333333333333334]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.73184672E12, 10.883333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73184672E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 11.366666666666667, "minX": 1.73184666E12, "maxY": 1624.0333333333333, "series": [{"data": [[1.73184666E12, 31.266666666666666], [1.73184672E12, 1624.0333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.73184672E12, 11.366666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73184672E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 11.366666666666667, "minX": 1.73184666E12, "maxY": 1624.0333333333333, "series": [{"data": [[1.73184666E12, 31.266666666666666], [1.73184672E12, 1624.0333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.73184672E12, 11.366666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73184672E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

